diff --git a/src/collective/shibboleth/browser/shibboleth-ds-plone.patch b/src/collective/shibboleth/browser/shibboleth-ds-plone.patch
index 5eb666d..e69de29 100644
--- a/src/collective/shibboleth/browser/shibboleth-ds-plone.patch
+++ b/src/collective/shibboleth/browser/shibboleth-ds-plone.patch
@@ -1,4976 +0,0 @@
-diff --git a/src/collective/shibboleth/browser/shibboleth-ds-plone.patch b/src/collective/shibboleth/browser/shibboleth-ds-plone.patch
-index 50c227d..e69de29 100644
---- a/src/collective/shibboleth/browser/shibboleth-ds-plone.patch
-+++ b/src/collective/shibboleth/browser/shibboleth-ds-plone.patch
-@@ -1,2487 +0,0 @@
--diff --git a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
--index 9389742..7dc85ba 100644
----- a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
--+++ b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
--@@ -1,11 +1,8 @@
-- /* Top level is idpSelectIdPSelector */
-- #idpSelectIdPSelector
-- {
---    width: 389px;
--+    width: 100%;
--     text-align: left;
---    background-color: #FFFFFF;
---    border: 2px #A40000 solid;
---    padding: 10px;
-- }
-- 
-- /* Next down are the idpSelectPreferredIdPTile, idpSelectIdPEntryTile & idpSelectIdPListTile */
--@@ -16,7 +13,7 @@
--  */
-- #idpSelectPreferredIdPTile
-- {
---    height:138px; /* Force the height so that the  selector box
--+    min-height:138px; /* Force the height so that the  selector box
--                    * goes below when there is only one preslect 
--                    */
-- }
--@@ -123,6 +120,7 @@ div.IdPSelectPreferredIdPButton div.IdPSelectTextDiv
-- #idpSelectIdPSelector a:link 
-- {
--     text-decoration: none;
--+    border-bottom: 0 none;
-- }
-- 
-- #idpSelectIdPSelector a:visited 
--@@ -201,5 +199,10 @@ div.IdPSelectDropDown div {
--  div.IdPSelectDropDown div.IdPSelectCurrent {
--     background-color: #3366cc;
--     color: white;
--+}
-- 
-- /* END */
--+
--+#idpSelectIdPEntryTile {
--+    margin-top:15px;
--+}
--diff --git a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.js b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.js
--index dfd2e72..e0aa135 100644
----- a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.js
--+++ b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.js
--@@ -1 +1,2417 @@
---function IdPSelectLanguages(){this.langBundles={en:{"fatal.divMissing":'<div> specified  as "insertAtDiv" could not be located in the HTML',"fatal.noXMLHttpRequest":"Browser does not support XMLHttpRequest, unable to load IdP selection data","fatal.wrongProtocol":'Policy supplied to DS was not "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',"fatal.wrongEntityId":"entityId supplied by SP did not match configuration","fatal.noData":"Metadata download returned no data","fatal.loadFailed":"Failed to download metadata from ","fatal.noparms":"No parameters to discovery session and no defaultReturn parameter configured","fatal.noReturnURL":"No URL return parameter provided","fatal.badProtocol":"Return request must start with https:// or http://","idpPreferred.label":"Use a suggested selection:","idpEntry.label":"Or enter your organization's name","idpEntry.NoPreferred.label":"Enter your organization's name","idpList.label":"Or select your organization from the list below","idpList.NoPreferred.label":"Select your organization from the list below","idpList.defaultOptionLabel":"Please select your organization...","idpList.showList":"Allow me to pick from a list","idpList.showSearch":"Allow me to specify the site","submitButton.label":"Continue",helpText:"Help",defaultLogoAlt:"DefaultLogo"},de:{"fatal.divMissing":"Das notwendige Div Element fehlt","fatal.noXMLHttpRequest":"Ihr Webbrowser unterst\u00fctzt keine XMLHttpRequests, IdP-Auswahl kann nicht geladen werden","fatal.wrongProtocol":'DS bekam eine andere Policy als "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',"fatal.wrongEntityId":"Die entityId ist nicht korrekt","fatal.loadFailed":"Metadaten konnten nicht heruntergeladen werden: ","fatal.noparms":"Parameter f\u00fcr das Discovery Service oder 'defaultReturn' fehlen","fatal.noReturnURL":"URL return Parmeter fehlt","fatal.badProtocol":"return Request muss mit https:// oder http:// beginnen","idpPreferred.label":"Vorherige Auswahl:","idpEntry.label":"Oder geben Sie den Namen (oder Teile davon) an:","idpEntry.NoPreferred.label":"Namen (oder Teile davon) der Institution angeben:","idpList.label":"Oder w\u00e4hlen Sie Ihre Institution aus einer Liste:","idpList.NoPreferred.label":"Institution aus folgender Liste w\u00e4hlen:","idpList.defaultOptionLabel":"W\u00e4hlen Sie Ihre Institution aus...","idpList.showList":"Institution aus einer Liste w\u00e4hlen","idpList.showSearch":"Institution selbst angeben","submitButton.label":"OK",helpText:"Hilfe",defaultLogoAlt:"Standard logo"},ja:{"fatal.divMissing":'"insertAtDiv" の ID を持つ <div> が HTML 中に存在しません',"fatal.noXMLHttpRequest":"ブラウザが XMLHttpRequest をサポートしていないので IdP 情報を取得できません","fatal.wrongProtocol":'DSへ渡された Policy パラメータが "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single" ではありません',"fatal.wrongEntityId":"SP から渡された entityId が設定値と異なります","fatal.noData":"メタデータが空です","fatal.loadFailed":"次の URL からメタデータをダウンロードできませんでした: ","fatal.noparms":"DSにパラメータが渡されておらず defaultReturn も設定されていません","fatal.noReturnURL":"戻り URL が指定されていません","fatal.badProtocol":"戻り URL は https:// か http:// で始まらなければなりません","idpPreferred.label":"選択候補の IdP:","idpEntry.label":"もしくはあなたの所属機関名を入力してください","idpEntry.NoPreferred.label":"あなたの所属機関名を入力してください","idpList.label":"もしくはあなたの所属機関を選択してください","idpList.NoPreferred.label":"あなたの所属機関を一覧から選択してください","idpList.defaultOptionLabel":"所属機関を選択してください...","idpList.showList":"一覧から選択する","idpList.showSearch":"機関名を入力する","submitButton.label":"選択",helpText:"Help",defaultLogoAlt:"DefaultLogo"},"pt-br":{"fatal.divMissing":'A tag <div> com "insertAtDiv" não foi encontrada no arquivo HTML',"fatal.noXMLHttpRequest":'Seu navegador não suporta "XMLHttpRequest", impossível de carregador os dados do IdP selecionado',"fatal.wrongProtocol":'A política "Policy" fornecida para o DS não foi "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',"fatal.wrongEntityId":"entityId oferecido pelo SP não confere com o da configuração","fatal.noData":"O arquivo de metadados não retornou nada;","fatal.loadFailed":"Falhou ao realizar download do metadado de ","fatal.noparms":'Sem parâmetros para sessão de descoberta e sem parâmetro "defaultReturn" configurado',"fatal.noReturnURL":"Não foi definida um endereço (URL) de retorno no parâmetro","fatal.badProtocol":"Retorno do endereço requisitado deve começar com https:// ou http://","idpPreferred.label":"Use estas Instituições sugeridas: ","idpEntry.label":"Ou informe o nome da sua Instituição","idpEntry.NoPreferred.label":"Informe o nome da sua Instituição","idpList.label":"Ou selecione sua Instituição através da lista abaixo","idpList.NoPreferred.label":"Selecione sua Instituição através da lista abaixo","idpList.defaultOptionLabel":"Por favor, selecione sua Instituição: ","idpList.showList":"Permitir que eu escolha um IdP através de uma lista","idpList.showSearch":"Permitir que eu especifique o IdP","submitButton.label":"Continuar ",helpText:"Ajuda",defaultLogoAlt:"Logo padrão"}}}function TypeAheadControl(l,f,j,g,i,b,h,e,a,c,d,k){this.elementList=l;this.textBox=f;this.origin=j;this.submit=g;this.results=0;this.alwaysShow=c;this.maxResults=d;this.ie6hack=a;this.maxchars=i;this.getName=b;this.getEntityId=h;this.geticon=e;this.getKeywords=k}TypeAheadControl.prototype.draw=function(b){var a=this;this.dropDown=document.createElement("ul");this.dropDown.className="IdPSelectDropDown";this.dropDown.style.visibility="hidden";this.dropDown.style.width=this.textBox.offsetWidth;this.dropDown.current=-1;this.textBox.setAttribute("role","listbox");document.body.appendChild(this.dropDown);this.textBox.setAttribute("role","combobox");this.textBox.setAttribute("aria-controls","IdPSelectDropDown");this.textBox.setAttribute("aria-owns","IdPSelectDropDown");this.dropDown.onmouseover=function(c){if(!c){c=window.event}var d;if(c.target){d=c.target}if(typeof d=="undefined"){d=c.srcElement}a.select(d)};this.dropDown.onmousedown=function(c){if(-1!=a.dropDown.current){a.textBox.value=a.results[a.dropDown.current][0]}};this.textBox.onkeyup=function(c){if(!c){c=window.event}a.handleKeyUp(c)};this.textBox.onkeydown=function(c){if(!c){c=window.event}a.handleKeyDown(c)};this.textBox.onblur=function(){a.hideDrop()};this.textBox.onfocus=function(){a.handleChange()};if(null==b||b){this.textBox.focus()}};TypeAheadControl.prototype.getPossible=function(b){var h=[];var j=0;var f=0;var e=0;var g;var i;b=b.toLowerCase();while(f<=this.maxResults&&j<this.elementList.length){var a=false;var c=this.getName(this.elementList[j]);if(c.toLowerCase().indexOf(b)!=-1){a=true}if(!a&&this.getEntityId(this.elementList[j]).toLowerCase().indexOf(b)!=-1){a=true}if(!a){var d=this.getKeywords(this.elementList[j]);if(null!=d&&d.toLowerCase().indexOf(b)!=-1){a=true}}if(a){h[f]=[c,this.getEntityId(this.elementList[j]),this.geticon(this.elementList[j])];f++}j++}this.dropDown.current=-1;return h};TypeAheadControl.prototype.handleKeyUp=function(b){var a=b.keyCode;if(27==a){this.textBox.value="";this.handleChange()}else{if(8==a||32==a||(a>=46&&a<112)||a>123){this.handleChange()}}};TypeAheadControl.prototype.handleKeyDown=function(b){var a=b.keyCode;if(38==a){this.upSelect()}else{if(40==a){this.downSelect()}}};TypeAheadControl.prototype.hideDrop=function(){var a=0;if(null!==this.ie6hack){while(a<this.ie6hack.length){this.ie6hack[a].style.visibility="visible";a++}}this.dropDown.style.visibility="hidden";this.textBox.setAttribute("aria-expanded","false");if(-1==this.dropDown.current){this.doUnselected()}};TypeAheadControl.prototype.showDrop=function(){var a=0;if(null!==this.ie6hack){while(a<this.ie6hack.length){this.ie6hack[a].style.visibility="hidden";a++}}this.dropDown.style.visibility="visible";this.textBox.setAttribute("aria-expanded","true")};TypeAheadControl.prototype.doSelected=function(){this.submit.disabled=false};TypeAheadControl.prototype.doUnselected=function(){this.submit.disabled=true;this.textBox.setAttribute("aria-activedescendant","")};TypeAheadControl.prototype.handleChange=function(){var b=this.textBox.value;var a=this.getPossible(b);if(0===b.length||0===a.length||(!this.alwaysShow&&this.maxResults<a.length)){this.hideDrop();this.doUnselected();this.results=[];this.dropDown.current=-1}else{this.results=a;this.populateDropDown(a);if(1==a.length){this.select(this.dropDown.childNodes[0]);this.doSelected()}else{this.doUnselected()}}};TypeAheadControl.prototype.populateDropDown=function(d){this.dropDown.innerHTML="";var c=0;var a;var b;var f;while(c<d.length){a=document.createElement("li");a.id="IdPSelectOption"+c;f=d[c][0];if(null!==d[c][2]){b=document.createElement("img");b.src=d[c][2];b.width=16;b.height=16;b.alt="";a.appendChild(b);if(f.length>this.maxchars-2){f=f.substring(0,this.maxchars-2)}f=" "+f}else{if(f.length>this.maxchars){f=f.substring(0,this.maxchars)}}a.appendChild(document.createTextNode(f));a.setAttribute("role","option");this.dropDown.appendChild(a);c++}var e=this.getXY();this.dropDown.style.left=e[0]+"px";this.dropDown.style.top=e[1]+"px";this.showDrop()};TypeAheadControl.prototype.getXY=function(){var a=this.textBox;var c=0;var b=a.offsetHeight;while(a.tagName!="BODY"){c+=a.offsetLeft;b+=a.offsetTop;a=a.offsetParent}c+=a.offsetLeft;b+=a.offsetTop;return[c,b]};TypeAheadControl.prototype.select=function(b){var a=0;var c;this.dropDown.current=-1;this.doUnselected();while(a<this.dropDown.childNodes.length){c=this.dropDown.childNodes[a];if(c==b){c.className="IdPSelectCurrent";c.setAttribute("aria-selected","true");this.textBox.setAttribute("aria-activedescendant","IdPSelectOption"+a);this.doSelected();this.dropDown.current=a;this.origin.value=this.results[a][1];this.origin.textValue=this.results[a][0]}else{c.setAttribute("aria-selected","false");c.className=""}a++}this.textBox.focus()};TypeAheadControl.prototype.downSelect=function(){if(this.results.length>0){if(-1==this.dropDown.current){this.dropDown.current=0;this.dropDown.childNodes[0].className="IdPSelectCurrent";this.dropDown.childNodes[0].setAttribute("aria-selected","true");this.textBox.setAttribute("aria-activedescendant","IdPSelectOption"+0);this.doSelected();this.origin.value=this.results[0][1];this.origin.textValue=this.results[0][0]}else{if(this.dropDown.current<(this.results.length-1)){this.dropDown.childNodes[this.dropDown.current].className="";this.dropDown.current++;this.dropDown.childNodes[this.dropDown.current].className="IdPSelectCurrent";this.dropDown.childNodes[this.dropDown.current].setAttribute("aria-selected","true");this.textBox.setAttribute("aria-activedescendant","IdPSelectOption"+this.dropDown.current);this.doSelected();this.origin.value=this.results[this.dropDown.current][1];this.origin.textValue=this.results[this.dropDown.current][0]}}}};TypeAheadControl.prototype.upSelect=function(){if((this.results.length>0)&&(this.dropDown.current>0)){this.dropDown.childNodes[this.dropDown.current].className="";this.dropDown.current--;this.dropDown.childNodes[this.dropDown.current].className="IdPSelectCurrent";this.dropDown.childNodes[this.dropDown.current].setAttribute("aria-selected","true");this.textBox.setAttribute("aria-activedescendant","IdPSelectOption"+this.dropDown.current);this.doSelected();this.origin.value=this.results[this.dropDown.current][1];this.origin.textValue=this.results[this.dropDown.current][0]}};function IdPSelectUI(){var o;var Q="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var aA;var M;var ar;var ae;var T;var d;var A;var l;var v;var i;var am;var f;var q;var U;var z;var Y;var L;var g;var F;var ak;var I;var N;var ac;var an;var ah;var c;var X;var B;var K;var O;var h;var ap;var P;var aC="idpSelect";var aa="IdPSelect";var ai;var y="";var S="";var aq=[];var ax="entityID";this.draw=function(aE){if(!k(aE)){return}aA=document.getElementById(aE.insertAtDiv);if(!aA){J(x("fatal.divMissing"));return}if(!e(aE.dataSource)){return}aB();r(aE.hiddenIdPs);o.sort(function(aG,aF){return av(aG).localeCompare(av(aF))});var aD=V();aA.appendChild(aD);ai.draw(aE.setFocusTextBox)};var k=function(aD){var aO;z=aD.preferredIdP;Y=aD.maxPreferredIdPs;L=aD.helpURL;g=aD.ie6Hack;F=aD.samlIdPCookieTTL;ac=aD.alwaysShow;an=aD.maxResults;ah=aD.ignoreKeywords;if(aD.showListFirst){c=aD.showListFirst}else{c=false}if(aD.noWriteCookie){X=aD.noWriteCookie}else{X=false}if(aD.ignoreURLParams){B=aD.ignoreURLParams}else{B=false}A=aD.defaultLogo;l=aD.defaultLogoWidth;v=aD.defaultLogoHeight;i=aD.minWidth;am=aD.minHeight;f=aD.maxWidth;q=aD.maxHeight;U=aD.bestRatio;I=aD.maxIdPCharsButton;ak=aD.maxIdPCharsDropDown;N=aD.maxIdPCharsAltTxt;var aE;if(typeof navigator=="undefined"){aE=aD.defaultLanguage}else{aE=navigator.language||navigator.userLanguage||aD.defaultLanguage}aE=aE.toLowerCase();if(aE.indexOf("-")>0){ar=aE.substring(0,aE.indexOf("-"))}var aP=new IdPSelectLanguages();ae=aD.defaultLanguage;if(typeof aD.langBundles!="undefined"&&typeof aD.langBundles[aE]!="undefined"){T=aD.langBundles[aE]}else{if(typeof aP.langBundles[aE]!="undefined"){T=aP.langBundles[aE]}else{if(typeof ar!="undefined"){if(typeof aD.langBundles!="undefined"&&typeof aD.langBundles[ar]!="undefined"){T=aD.langBundles[ar]}else{if(typeof aP.langBundles[ar]!="undefined"){T=aP.langBundles[ar]}}}}}if(typeof aD.langBundles!="undefined"&&typeof aD.langBundles[aD.defaultLanguage]!="undefined"){d=aD.langBundles[aD.defaultLanguage]}else{d=aP.langBundles[aD.defaultLanguage]}if(!d){J("No languages work");return false}if(!T){p("No language support for "+aE);T=d}if(aD.testGUI){return true}var aK="urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single";var aG;var aF=false;var aM;var aL;var aI=window;while(null!==aI.parent&&aI!==aI.parent){aI=aI.parent}var aH=aI.location;var aJ=aH.search;if(B||null==aJ||0==aJ.length||aJ.charAt(0)!="?"){if((null==aD.defaultReturn)&&!B){J(x("fatal.noparms"));return false}aO=aD.myEntityID;y=aD.defaultReturn;if(null!=aD.defaultReturnIDParam){ax=aD.defaultReturnIDParam}}else{aJ=aJ.substring(1);aM=aJ.split("&");if(aM.length===0){J(x("fatal.noparms"));return false}for(aG=0;aG<aM.length;aG++){aL=aM[aG].split("=");if(aL.length!=2){continue}if(aL[0]=="entityID"){aO=decodeURIComponent(aL[1])}else{if(aL[0]=="return"){y=decodeURIComponent(aL[1])}else{if(aL[0]=="returnIDParam"){ax=decodeURIComponent(aL[1])}else{if(aL[0]=="policy"){aK=decodeURIComponent(aL[1])}else{if(aL[0]=="isPassive"){aF=(aL[1].toUpperCase()=="TRUE")}}}}}}}if(aK!="urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"){J(x("fatal.wrongProtocol"));return false}if(aD.myEntityID!==null&&aD.myEntityID!=aO){J(x("fatal.wrongEntityId")+'"'+aO+'" != "'+aD.myEntityID+'"');return false}if(null===y||y.length===0){J(x("fatal.noReturnURL"));return false}if(!af(y)){J(x("fatal.badProtocol"));return false}if(aF){var aQ=b();if(aQ.length==0){location.href=y;return false}else{var aN=ax+"="+encodeURIComponent(aQ[0]);if(y.indexOf("?")==-1){aN="?"+aN}else{aN="&"+aN}location.href=y+aN;return false}}aG=y.indexOf("?");if(aG<0){S=y;return true}S=y.substring(0,aG);aJ=y.substring(aG+1);aM=aJ.split("&");for(aG=0;aG<aM.length;aG++){aL=aM[aG].split("=");if(aL.length!=2){continue}aL[1]=decodeURIComponent(aL[1]);aq.push(aL)}return true};var aB=function(){var aF=[];var aE;for(aE=0;aE<o.length;){var aD=w(o[aE]);if(null==aF[aD]){aF[aD]=aD;aE=aE+1}else{o.splice(aE,1)}}};var r=function(aF){if(null==aF||0==aF.length){return}var aE;var aD;for(aE=0;aE<aF.length;aE++){for(aD=0;aD<o.length;aD++){if(w(o[aD])==aF[aE]){o.splice(aD,1);break}}}};var af=function(aE){if(null===aE){return false}var aD="://";var aF=aE.indexOf(aD);if(aF<0){return false}aE=aE.substring(0,aF);if(aE=="http"||aE=="https"){return true}return false};var az=function(){if(null==navigator){return false}var aD=navigator.appName;if(null==aD){return false}return(aD=="Microsoft Internet Explorer")};var e=function(aG){var aF=null;try{aF=new XMLHttpRequest()}catch(aE){}if(null==aF){try{aF=new ActiveXObject("Microsoft.XMLHTTP")}catch(aE){}}if(null==aF){try{aF=new ActiveXObject("MSXML2.XMLHTTP.3.0")}catch(aE){}}if(null==aF){J(x("fatal.noXMLHttpRequest"));return false}if(az()){aG+="?random="+(Math.random()*1000000)}aF.open("GET",aG,false);if(typeof aF.overrideMimeType=="function"){aF.overrideMimeType("application/json")}aF.send(null);if(aF.status==200){var aD=aF.responseText;if(aD===null){J(x("fatal.noData"));return false}o=JSON.parse(aD)}else{J(x("fatal.loadFailed")+aG);return false}return true};var W=function(aD){for(var aE=0;aE<o.length;aE++){if(w(o[aE])==aD){return o[aE]}}return null};var C=function(aK,aE){var aJ=function(aN){var aL=null;var aM;if(null==aK.Logos){return null}for(aM in aK.Logos){if(aK.Logos[aM].lang==aN&&aK.Logos[aM].width!=null&&aK.Logos[aM].width>=i&&aK.Logos[aM].height!=null&&aK.Logos[aM].height>=am){if(aL===null){aL=aK.Logos[aM]}else{me=Math.abs(U-Math.log(aK.Logos[aM].width/aK.Logos[aM].height));him=Math.abs(U-Math.log(aL.width/aL.height));if(him>me){aL=aK.Logos[aM]}}}}return aL};var aG=null;var aF=document.createElement("img");ad(aF,"IdPImg");aG=aJ(M);if(null===aG&&typeof ar!="undefined"){aG=aJ(ar)}if(null===aG){aG=aJ(null)}if(null===aG){aG=aJ(ae)}if(null===aG){if(!aE){return null}aF.src=A;aF.width=l;aF.height=v;aF.alt=x("defaultLogoAlt");return aF}aF.src=aG.value;var aH=av(aK);if(aH.length>N){aH=aH.substring(0,N)+"..."}aF.alt=aH;var aD=aG.width;var aI=aG.height;if(aD>f){aI=(f/aD)*aI;aD=f}if(aI>q){aD=(q/aI)*aD;aD=q}aF.setAttribute("width",aD);aF.setAttribute("height",aI);return aF};var V=function(){var aE=ag("IdPSelector");var aD;aD=at(aE);m(aE,aD);R(aE,aD);return aE};var H=function(aF,aM,aE){var aD=ag(undefined,"PreferredIdPButton");var aL=document.createElement("a");var aK=ax+"="+encodeURIComponent(w(aF));var aG=y;var aI=C(aF,aE);if(aG.indexOf("?")==-1){aK="?"+aK}else{aK="&"+aK}aL.href=aG+aK;aL.onclick=function(){ay(w(aF))};if(null!=aI){var aN=ag(undefined,"PreferredIdPImg");aN.appendChild(aI);aL.appendChild(aN)}var aJ=ag(undefined,"TextDiv");var aH=av(aF);if(aH.length>I){aH=aH.substring(0,I)+"..."}aD.title=aH;aJ.appendChild(document.createTextNode(aH));aL.appendChild(aJ);aD.appendChild(aL);return aD};var aw=function(aD,aG){var aF=ag(undefined,"TextDiv");var aE=document.createTextNode(x(aG));aF.appendChild(aE);aD.appendChild(aF)};var a=function(aD,aF){if(null===aF||0===aF.length||"-"==aF.value){return}var aE=0;while(aE<aD.options.length){if(aD.options[aE].value==aF){aD.options[aE].selected=true;break}aE++}};var at=function(aI){var aH=G();if(0===aH.length){return false}var aD=false;for(var aF=0;aF<Y&&aF<aH.length;aF++){if(aH[aF]&&C(aH[aF],false)){aD=true}}var aG;if(aD){aG=ag("PreferredIdPTile")}else{aG=ag("PreferredIdPTileNoImg")}aw(aG,"idpPreferred.label");for(var aF=0;aF<Y&&aF<aH.length;aF++){if(aH[aF]){var aE=H(aH[aF],aF,aD);aG.appendChild(aE)}}aI.appendChild(aG);return true};var Z=function(){var aE=document.createElement("form");O.appendChild(aE);aE.action=S;aE.method="GET";aE.setAttribute("autocomplete","OFF");var aD=0;for(aD=0;aD<aq.length;aD++){var aF=document.createElement("input");aF.setAttribute("type","hidden");aF.name=aq[aD][0];aF.value=aq[aD][1];aE.appendChild(aF)}return aE};var m=function(aK,aE){O=ag("IdPEntryTile");if(c){O.style.display="none"}var aF=document.createElement("label");aF.setAttribute("for",aC+"Input");if(aE){aw(aF,"idpEntry.label")}else{aw(aF,"idpEntry.NoPreferred.label")}var aI=Z();aI.appendChild(aF);var aH=document.createElement("input");aI.appendChild(aH);aH.type="text";j(aH,"Input");var aJ=document.createElement("input");aJ.setAttribute("type","hidden");aI.appendChild(aJ);aJ.name=ax;aJ.value="-";var aG=s("Select");aG.disabled=true;aI.appendChild(aG);aI.onsubmit=function(){if(null===aJ.value||0===aJ.value.length||"-"==aJ.value){return false}aH.value=aJ.textValue;ay(aJ.value);return true};ai=new TypeAheadControl(o,aH,aJ,aG,ak,av,w,ab,g,ac,an,D);var aD=document.createElement("a");aD.appendChild(document.createTextNode(x("idpList.showList")));aD.href="#";ad(aD,"DropDownToggle");aD.onclick=function(){O.style.display="none";a(ap,aJ.value);h.style.display="inline";P.focus();return false};O.appendChild(aD);u(O);aK.appendChild(O)};var R=function(aD,aG){h=ag("IdPListTile");if(!c){h.style.display="none"}var aK=document.createElement("label");aK.setAttribute("for",aC+"Selector");if(aG){aw(aK,"idpList.label")}else{aw(aK,"idpList.NoPreferred.label")}ap=document.createElement("select");j(ap,"Selector");ap.name=ax;h.appendChild(ap);var aL=n("-",x("idpList.defaultOptionLabel"));aL.selected=true;ap.appendChild(aL);var aF;for(var aH=0;aH<o.length;aH++){aF=o[aH];aL=n(w(aF),av(aF));ap.appendChild(aL)}var aE=Z();aE.appendChild(aK);aE.appendChild(ap);aE.onsubmit=function(){if(ap.selectedIndex<1){return false}ay(ap.options[ap.selectedIndex].value);return true};var aI=s("List");P=aI;aE.appendChild(aI);h.appendChild(aE);var aJ=document.createElement("a");aJ.appendChild(document.createTextNode(x("idpList.showSearch")));aJ.href="#";ad(aJ,"DropDownToggle");aJ.onclick=function(){O.style.display="inline";h.style.display="none";return false};h.appendChild(aJ);u(h);aD.appendChild(h)};var s=function(aE){var aD=document.createElement("input");aD.setAttribute("type","submit");aD.value=x("submitButton.label");j(aD,aE+"Button");return aD};var u=function(aE){var aD=document.createElement("a");aD.href=L;aD.appendChild(document.createTextNode(x("helpText")));ad(aD,"HelpButton");aE.appendChild(aD)};var ag=function(aF,aD){var aE=document.createElement("div");if(undefined!==aF){j(aE,aF)}if(undefined!==aD){ad(aE,aD)}return aE};var n=function(aE,aF){var aD=document.createElement("option");aD.value=aE;if(aF.length>ak){aF=aF.substring(0,ak)}aD.appendChild(document.createTextNode(aF));return aD};var j=function(aE,aD){aE.id=aC+aD};var ad=function(aE,aD){aE.setAttribute("class",aa+aD)};var au=function(aD){return document.getElementById(aC+aD)};var ay=function(aD){E(aD);aj(K)};var x=function(aD){var aE=T[aD];if(!aE){aE=d[aD]}if(!aE){aE="Missing message for "+aD}return aE};var w=function(aD){return aD.entityID};var ab=function(aF){var aD;if(null==aF.Logos){return null}for(aD=0;aD<aF.Logos.length;aD++){var aE=aF.Logos[aD];if(aE.height=="16"&&aE.width=="16"){if(null==aE.lang||M==aE.lang||(typeof ar!="undefined"&&ar==aE.lang)||ae==aE.lang){return aE.value}}}return null};var av=function(aE){var aD=ao(aE.DisplayNames);if(null!==aD){return aD}p("No Name entry in any language for "+w(aE));return w(aE)};var D=function(aE){if(ah||null==aE.Keywords){return null}var aD=ao(aE.Keywords);return aD};var ao=function(aD){var aE;for(aE in aD){if(aD[aE].lang==M){return aD[aE].value}}if(typeof ar!="undefined"){for(aE in aD){if(aD[aE].lang==ar){return aD[aE].value}}}for(aE in aD){if(aD[aE].lang==null){return aD[aE].value}}for(aE in aD){if(aD[aE].lang==ae){return aD[aE].value}}return null};var G=function(){var aG=[];var aF=0;var aE;var aD;if(null!=z){for(aE=0;aE<z.length&&aE<Y-1;aE++){aG[aE]=W(z[aE]);aF++}}K=b();for(aE=aF,aD=0;aE<K.length&&aE<Y;aE++,aD++){aG.push(W(K[aD]))}return aG};var E=function(aD){var aE=[];while(0!==K.length){var aF=K.pop();if(aF!=aD){aE.unshift(aF)}}aE.unshift(aD);K=aE;return};var b=function(){var aJ=[];var aI,aG;var aL;aL=document.cookie.split(";");for(aI=0;aI<aL.length;aI++){var aD=aL[aI];var aH=aD.indexOf("=");var aK=aD.substring(0,aH);var aF=aD.substring(aH+1);if("_saml_idp"==aK.replace(/^\s+|\s+$/g,"")){aF=aF.replace(/^\s+|\s+$/g,"");aF=aF.replace("+","%20");aF=aF.split("%20");for(aG=aF.length;aG>0;aG--){if(0===aF[aG-1].length){continue}var aE=al(decodeURIComponent(aF[aG-1]));if(aE.length>0){aJ.push(aE)}}}}return aJ};var aj=function(aI){var aF=[];var aH=aI.length;if(X){return}if(aH>5){aH=5}for(var aG=aH;aG>0;aG--){if(aI[aG-1].length>0){aF.push(encodeURIComponent(t(aI[aG-1])))}}var aD=null;if(F){var aE=new Date();cookieTTL=F*24*60*60*1000;aD=new Date(aE.getTime()+cookieTTL)}document.cookie="_saml_idp="+aF.join("%20")+"; path = /"+((aD===null)?"":"; expires="+aD.toUTCString())};var t=function(aM){var aD="",aH,aF,aE,aL,aK,aJ,aI;for(var aG=0;aG<aM.length;){aH=aM.charCodeAt(aG++);aF=aM.charCodeAt(aG++);aE=aM.charCodeAt(aG++);aL=aH>>2;aK=((aH&3)<<4)+(aF>>4);aJ=((aF&15)<<2)+(aE>>6);aI=aE&63;if(isNaN(aF)){aJ=aI=64}else{if(isNaN(aE)){aI=64}}aD+=Q.charAt(aL)+Q.charAt(aK)+Q.charAt(aJ)+Q.charAt(aI)}return aD};var al=function(aG){var aE="",aN,aL,aJ,aM,aK,aI,aH;var aF=0;var aD=/[^A-Za-z0-9\+\/\=]/g;aG=aG.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{aM=Q.indexOf(aG.charAt(aF++));aK=Q.indexOf(aG.charAt(aF++));aI=Q.indexOf(aG.charAt(aF++));aH=Q.indexOf(aG.charAt(aF++));aN=(aM<<2)|(aK>>4);aL=((aK&15)<<4)|(aI>>2);aJ=((aI&3)<<6)|aH;aE=aE+String.fromCharCode(aN);if(aI!=64){aE=aE+String.fromCharCode(aL)}if(aH!=64){aE=aE+String.fromCharCode(aJ)}aN=aL=aJ="";aM=aK=aI=aH=""}while(aF<aG.length);return aE};var J=function(aE){alert("FATAL - DISCO UI:"+aE);var aD=document.createTextNode(aE);aA.appendChild(aD)};var p=function(){}}(new IdPSelectUI()).draw(new IdPSelectUIParms());
--\ No newline at end of file
--+/*
--+    http://www.JSON.org/json2.js
--+    2011-02-23
--+
--+    Public Domain.
--+
--+    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
--+
--+    See http://www.JSON.org/js.html
--+
--+
--+    This code should be minified before deployment.
--+    See http://javascript.crockford.com/jsmin.html
--+
--+    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
--+    NOT CONTROL.
--+
--+
--+    This file creates a global JSON object containing two methods: stringify
--+    and parse.
--+
--+        JSON.stringify(value, replacer, space)
--+            value       any JavaScript value, usually an object or array.
--+
--+            replacer    an optional parameter that determines how object
--+                        values are stringified for objects. It can be a
--+                        function or an array of strings.
--+
--+            space       an optional parameter that specifies the indentation
--+                        of nested structures. If it is omitted, the text will
--+                        be packed without extra whitespace. If it is a number,
--+                        it will specify the number of spaces to indent at each
--+                        level. If it is a string (such as '\t' or '&nbsp;'),
--+                        it contains the characters used to indent at each level.
--+
--+            This method produces a JSON text from a JavaScript value.
--+
--+            When an object value is found, if the object contains a toJSON
--+            method, its toJSON method will be called and the result will be
--+            stringified. A toJSON method does not serialize: it returns the
--+            value represented by the name/value pair that should be serialized,
--+            or undefined if nothing should be serialized. The toJSON method
--+            will be passed the key associated with the value, and this will be
--+            bound to the value
--+
--+            For example, this would serialize Dates as ISO strings.
--+
--+                Date.prototype.toJSON = function (key) {
--+                    function f(n) {
--+                        // Format integers to have at least two digits.
--+                        return n < 10 ? '0' + n : n;
--+                    }
--+
--+                    return this.getUTCFullYear()   + '-' +
--+                         f(this.getUTCMonth() + 1) + '-' +
--+                         f(this.getUTCDate())      + 'T' +
--+                         f(this.getUTCHours())     + ':' +
--+                         f(this.getUTCMinutes())   + ':' +
--+                         f(this.getUTCSeconds())   + 'Z';
--+                };
--+
--+            You can provide an optional replacer method. It will be passed the
--+            key and value of each member, with this bound to the containing
--+            object. The value that is returned from your method will be
--+            serialized. If your method returns undefined, then the member will
--+            be excluded from the serialization.
--+
--+            If the replacer parameter is an array of strings, then it will be
--+            used to select the members to be serialized. It filters the results
--+            such that only members with keys listed in the replacer array are
--+            stringified.
--+
--+            Values that do not have JSON representations, such as undefined or
--+            functions, will not be serialized. Such values in objects will be
--+            dropped; in arrays they will be replaced with null. You can use
--+            a replacer function to replace those with JSON values.
--+            JSON.stringify(undefined) returns undefined.
--+
--+            The optional space parameter produces a stringification of the
--+            value that is filled with line breaks and indentation to make it
--+            easier to read.
--+
--+            If the space parameter is a non-empty string, then that string will
--+            be used for indentation. If the space parameter is a number, then
--+            the indentation will be that many spaces.
--+
--+            Example:
--+
--+            text = JSON.stringify(['e', {pluribus: 'unum'}]);
--+            // text is '["e",{"pluribus":"unum"}]'
--+
--+
--+            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
--+            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'
--+
--+            text = JSON.stringify([new Date()], function (key, value) {
--+                return this[key] instanceof Date ?
--+                    'Date(' + this[key] + ')' : value;
--+            });
--+            // text is '["Date(---current time---)"]'
--+
--+
--+        JSON.parse(text, reviver)
--+            This method parses a JSON text to produce an object or array.
--+            It can throw a SyntaxError exception.
--+
--+            The optional reviver parameter is a function that can filter and
--+            transform the results. It receives each of the keys and values,
--+            and its return value is used instead of the original value.
--+            If it returns what it received, then the structure is not modified.
--+            If it returns undefined then the member is deleted.
--+
--+            Example:
--+
--+            // Parse the text. Values that look like ISO date strings will
--+            // be converted to Date objects.
--+
--+            myData = JSON.parse(text, function (key, value) {
--+                var a;
--+                if (typeof value === 'string') {
--+                    a =
--+/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
--+                    if (a) {
--+                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
--+                            +a[5], +a[6]));
--+                    }
--+                }
--+                return value;
--+            });
--+
--+            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
--+                var d;
--+                if (typeof value === 'string' &&
--+                        value.slice(0, 5) === 'Date(' &&
--+                        value.slice(-1) === ')') {
--+                    d = new Date(value.slice(5, -1));
--+                    if (d) {
--+                        return d;
--+                    }
--+                }
--+                return value;
--+            });
--+
--+
--+    This is a reference implementation. You are free to copy, modify, or
--+    redistribute.
--+*/
--+
--+/*jslint evil: true, strict: false, regexp: false */
--+
--+/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
--+    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
--+    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
--+    lastIndex, length, parse, prototype, push, replace, slice, stringify,
--+    test, toJSON, toString, valueOf
--+*/
--+
--+
--+// Create a JSON object only if one does not already exist. We create the
--+// methods in a closure to avoid creating global variables.
--+
--+var JSON;
--+if (!JSON) {
--+    JSON = {};
--+}
--+
--+(function () {
--+    "use strict";
--+
--+    function f(n) {
--+        // Format integers to have at least two digits.
--+        return n < 10 ? '0' + n : n;
--+    }
--+
--+    if (typeof Date.prototype.toJSON !== 'function') {
--+
--+        Date.prototype.toJSON = function (key) {
--+
--+            return isFinite(this.valueOf()) ?
--+                this.getUTCFullYear()     + '-' +
--+                f(this.getUTCMonth() + 1) + '-' +
--+                f(this.getUTCDate())      + 'T' +
--+                f(this.getUTCHours())     + ':' +
--+                f(this.getUTCMinutes())   + ':' +
--+                f(this.getUTCSeconds())   + 'Z' : null;
--+        };
--+
--+        String.prototype.toJSON      =
--+            Number.prototype.toJSON  =
--+            Boolean.prototype.toJSON = function (key) {
--+                return this.valueOf();
--+            };
--+    }
--+
--+    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
--+        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
--+        gap,
--+        indent,
--+        meta = {    // table of character substitutions
--+            '\b': '\\b',
--+            '\t': '\\t',
--+            '\n': '\\n',
--+            '\f': '\\f',
--+            '\r': '\\r',
--+            '"' : '\\"',
--+            '\\': '\\\\'
--+        },
--+        rep;
--+
--+
--+    function quote(string) {
--+
--+// If the string contains no control characters, no quote characters, and no
--+// backslash characters, then we can safely slap some quotes around it.
--+// Otherwise we must also replace the offending characters with safe escape
--+// sequences.
--+
--+        escapable.lastIndex = 0;
--+        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
--+            var c = meta[a];
--+            return typeof c === 'string' ? c :
--+                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
--+        }) + '"' : '"' + string + '"';
--+    }
--+
--+
--+    function str(key, holder) {
--+
--+// Produce a string from holder[key].
--+
--+        var i,          // The loop counter.
--+            k,          // The member key.
--+            v,          // The member value.
--+            length,
--+            mind = gap,
--+            partial,
--+            value = holder[key];
--+
--+// If the value has a toJSON method, call it to obtain a replacement value.
--+
--+        if (value && typeof value === 'object' &&
--+                typeof value.toJSON === 'function') {
--+            value = value.toJSON(key);
--+        }
--+
--+// If we were called with a replacer function, then call the replacer to
--+// obtain a replacement value.
--+
--+        if (typeof rep === 'function') {
--+            value = rep.call(holder, key, value);
--+        }
--+
--+// What happens next depends on the value's type.
--+
--+        switch (typeof value) {
--+        case 'string':
--+            return quote(value);
--+
--+        case 'number':
--+
--+// JSON numbers must be finite. Encode non-finite numbers as null.
--+
--+            return isFinite(value) ? String(value) : 'null';
--+
--+        case 'boolean':
--+        case 'null':
--+
--+// If the value is a boolean or null, convert it to a string. Note:
--+// typeof null does not produce 'null'. The case is included here in
--+// the remote chance that this gets fixed someday.
--+
--+            return String(value);
--+
--+// If the type is 'object', we might be dealing with an object or an array or
--+// null.
--+
--+        case 'object':
--+
--+// Due to a specification blunder in ECMAScript, typeof null is 'object',
--+// so watch out for that case.
--+
--+            if (!value) {
--+                return 'null';
--+            }
--+
--+// Make an array to hold the partial results of stringifying this object value.
--+
--+            gap += indent;
--+            partial = [];
--+
--+// Is the value an array?
--+
--+            if (Object.prototype.toString.apply(value) === '[object Array]') {
--+
--+// The value is an array. Stringify every element. Use null as a placeholder
--+// for non-JSON values.
--+
--+                length = value.length;
--+                for (i = 0; i < length; i += 1) {
--+                    partial[i] = str(i, value) || 'null';
--+                }
--+
--+// Join all of the elements together, separated with commas, and wrap them in
--+// brackets.
--+
--+                v = partial.length === 0 ? '[]' : gap ?
--+                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
--+                    '[' + partial.join(',') + ']';
--+                gap = mind;
--+                return v;
--+            }
--+
--+// If the replacer is an array, use it to select the members to be stringified.
--+
--+            if (rep && typeof rep === 'object') {
--+                length = rep.length;
--+                for (i = 0; i < length; i += 1) {
--+                    if (typeof rep[i] === 'string') {
--+                        k = rep[i];
--+                        v = str(k, value);
--+                        if (v) {
--+                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
--+                        }
--+                    }
--+                }
--+            } else {
--+
--+// Otherwise, iterate through all of the keys in the object.
--+
--+                for (k in value) {
--+                    if (Object.prototype.hasOwnProperty.call(value, k)) {
--+                        v = str(k, value);
--+                        if (v) {
--+                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
--+                        }
--+                    }
--+                }
--+            }
--+
--+// Join all of the member texts together, separated with commas,
--+// and wrap them in braces.
--+
--+            v = partial.length === 0 ? '{}' : gap ?
--+                '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
--+                '{' + partial.join(',') + '}';
--+            gap = mind;
--+            return v;
--+        }
--+    }
--+
--+// If the JSON object does not yet have a stringify method, give it one.
--+
--+    if (typeof JSON.stringify !== 'function') {
--+        JSON.stringify = function (value, replacer, space) {
--+
--+// The stringify method takes a value and an optional replacer, and an optional
--+// space parameter, and returns a JSON text. The replacer can be a function
--+// that can replace values, or an array of strings that will select the keys.
--+// A default replacer method can be provided. Use of the space parameter can
--+// produce text that is more easily readable.
--+
--+            var i;
--+            gap = '';
--+            indent = '';
--+
--+// If the space parameter is a number, make an indent string containing that
--+// many spaces.
--+
--+            if (typeof space === 'number') {
--+                for (i = 0; i < space; i += 1) {
--+                    indent += ' ';
--+                }
--+
--+// If the space parameter is a string, it will be used as the indent string.
--+
--+            } else if (typeof space === 'string') {
--+                indent = space;
--+            }
--+
--+// If there is a replacer, it must be a function or an array.
--+// Otherwise, throw an error.
--+
--+            rep = replacer;
--+            if (replacer && typeof replacer !== 'function' &&
--+                    (typeof replacer !== 'object' ||
--+                    typeof replacer.length !== 'number')) {
--+                throw new Error('JSON.stringify');
--+            }
--+
--+// Make a fake root object containing our value under the key of ''.
--+// Return the result of stringifying the value.
--+
--+            return str('', {'': value});
--+        };
--+    }
--+
--+
--+// If the JSON object does not yet have a parse method, give it one.
--+
--+    if (typeof JSON.parse !== 'function') {
--+        JSON.parse = function (text, reviver) {
--+
--+// The parse method takes a text and an optional reviver function, and returns
--+// a JavaScript value if the text is a valid JSON text.
--+
--+            var j;
--+
--+            function walk(holder, key) {
--+
--+// The walk method is used to recursively walk the resulting structure so
--+// that modifications can be made.
--+
--+                var k, v, value = holder[key];
--+                if (value && typeof value === 'object') {
--+                    for (k in value) {
--+                        if (Object.prototype.hasOwnProperty.call(value, k)) {
--+                            v = walk(value, k);
--+                            if (v !== undefined) {
--+                                value[k] = v;
--+                            } else {
--+                                delete value[k];
--+                            }
--+                        }
--+                    }
--+                }
--+                return reviver.call(holder, key, value);
--+            }
--+
--+
--+// Parsing happens in four stages. In the first stage, we replace certain
--+// Unicode characters with escape sequences. JavaScript handles many characters
--+// incorrectly, either silently deleting them, or treating them as line endings.
--+
--+            text = String(text);
--+            cx.lastIndex = 0;
--+            if (cx.test(text)) {
--+                text = text.replace(cx, function (a) {
--+                    return '\\u' +
--+                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
--+                });
--+            }
--+
--+// In the second stage, we run the text against regular expressions that look
--+// for non-JSON patterns. We are especially concerned with '()' and 'new'
--+// because they can cause invocation, and '=' because it can cause mutation.
--+// But just to be safe, we want to reject all unexpected forms.
--+
--+// We split the second stage into 4 regexp operations in order to work around
--+// crippling inefficiencies in IE's and Safari's regexp engines. First we
--+// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
--+// replace all simple value tokens with ']' characters. Third, we delete all
--+// open brackets that follow a colon or comma or that begin the text. Finally,
--+// we look to see that the remaining characters are only whitespace or ']' or
--+// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.
--+
--+            if (/^[\],:{}\s]*$/
--+                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
--+                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
--+                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
--+
--+// In the third stage we use the eval function to compile the text into a
--+// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
--+// in JavaScript: it can begin a block or an object literal. We wrap the text
--+// in parens to eliminate the ambiguity.
--+
--+                j = eval('(' + text + ')');
--+
--+// In the optional fourth stage, we recursively walk the new structure, passing
--+// each name/value pair to a reviver function for possible transformation.
--+
--+                return typeof reviver === 'function' ?
--+                    walk({'': j}, '') : j;
--+            }
--+
--+// If the text is not JSON parseable, then a SyntaxError is thrown.
--+
--+            throw new SyntaxError('JSON.parse');
--+        };
--+    }
--+}());
--+
--+function TypeAheadControl(jsonObj, box, orig, submit, maxchars, getName, getEntityId, geticon, ie6hack, alwaysShow, maxResults, getKeywords)
--+{
--+    //
--+    // Squirrel away the parameters we were given
--+    //
--+    this.elementList = jsonObj;
--+    this.textBox = box;
--+    this.origin = orig;
--+    this.submit = submit;
--+    this.results = 0;
--+    this.alwaysShow = alwaysShow;
--+    this.maxResults = maxResults;
--+    this.ie6hack = ie6hack;
--+    this.maxchars = maxchars;
--+    this.getName = getName;
--+    this.getEntityId = getEntityId;
--+    this.geticon = geticon;
--+    this.getKeywords = getKeywords;
--+}
--+
--+TypeAheadControl.prototype.draw = function(setFocus) {
--+
--+    //
--+    // Make a closure on this so that the embedded functions
--+    // get access to it.
--+    //
--+    var myThis = this;
--+   
--+
--+    //
--+    // Set up the 'dropDown'
--+    //
--+    this.dropDown = document.createElement('ul');
--+    this.dropDown.className = 'IdPSelectDropDown';
--+    this.dropDown.style.visibility = 'hidden';
--+
--+    this.dropDown.style.width = this.textBox.offsetWidth;
--+    this.dropDown.current = -1;
--+    this.textBox.setAttribute('role', 'listbox');
--+    document.body.appendChild(this.dropDown);
--+
--+    //
--+    // Set ARIA on the input
--+    //
--+    this.textBox.setAttribute('role', 'combobox');
--+    this.textBox.setAttribute('aria-controls', 'IdPSelectDropDown');
--+    this.textBox.setAttribute('aria-owns', 'IdPSelectDropDown');
--+
--+    //
--+    // mouse listeners for the dropdown box
--+    //
--+    this.dropDown.onmouseover = function(event) {
--+        if (!event) {
--+            event = window.event;
--+        }
--+        var target;
--+        if (event.target){
--+            target = event.target;
--+        }
--+        if (typeof target == 'undefined') {
--+            target = event.srcElement;
--+        }
--+        myThis.select(target);
--+    };
--+   
--+    this.dropDown.onmousedown = function(event) {
--+        if (-1 != myThis.dropDown.current) {
--+            myThis.textBox.value = myThis.results[myThis.dropDown.current][0];
--+        }
--+    };
--+
--+    //
--+    // Add the listeners to the text box
--+    //
--+    this.textBox.onkeyup = function(event) {
--+        //
--+        // get window event if needed (because of browser oddities)
--+        //
--+        if (!event) {
--+            event = window.event;
--+        }
--+        myThis.handleKeyUp(event);
--+    };
--+
--+    this.textBox.onkeydown = function(event) {
--+        if (!event) {
--+            event = window.event;
--+        }
--+
--+        myThis.handleKeyDown(event);
--+    };
--+
--+    this.textBox.onblur = function() {
--+        myThis.hideDrop();
--+    };
--+
--+    this.textBox.onfocus = function() {
--+        myThis.handleChange();
--+    };
--+
--+    if (null == setFocus || setFocus) {
--+        this.textBox.focus();
--+    }
--+};
--+
--+//
--+// Given a name return the first maxresults, or all possibles
--+//
--+TypeAheadControl.prototype.getPossible = function(name) {
--+    var possibles = [];
--+    var inIndex = 0;
--+    var outIndex = 0;
--+    var strIndex = 0;
--+    var str;
--+    var ostr;
--+
--+    name = name.toLowerCase();
--+        
--+    while (outIndex <= this.maxResults && inIndex < this.elementList.length) {
--+        var hit = false;
--+        var thisName = this.getName(this.elementList[inIndex]);
--+
--+        //
--+        // Check name
--+        //
--+        if (thisName.toLowerCase().indexOf(name) != -1) {
--+            hit = true;
--+        }  
--+        //
--+        // Check entityID
--+        //
--+        if (!hit && this.getEntityId(this.elementList[inIndex]).toLowerCase().indexOf(name) != -1) {
--+            hit = true;
--+        }
--+
--+        if (!hit) {
--+            var thisKeywords = this.getKeywords(this.elementList[inIndex]);
--+            if (null != thisKeywords && 
--+                thisKeywords.toLowerCase().indexOf(name) != -1) {
--+                hit = true;
--+            }
--+        }  
--+                
--+        if (hit) {
--+            possibles[outIndex] = [thisName, this.getEntityId(this.elementList[inIndex]), this.geticon(this.elementList[inIndex])];
--+            outIndex ++;
--+        }
--+                
--+        inIndex ++;
--+    }
--+    //
--+    // reset the cursor to the top
--+    //
--+    this.dropDown.current = -1;
--+    
--+    return possibles;
--+};
--+
--+TypeAheadControl.prototype.handleKeyUp = function(event) {
--+    var key = event.keyCode;
--+
--+    if (27 == key) {
--+        //
--+        // Escape - clear
--+        //
--+        this.textBox.value = '';
--+        this.handleChange();
--+    } else if (8 == key || 32 == key || (key >= 46 && key < 112) || key > 123) {
--+        //
--+        // Backspace, Space and >=Del to <F1 and > F12
--+        //
--+        this.handleChange();
--+    }
--+};
--+ 
--+TypeAheadControl.prototype.handleKeyDown = function(event) {
--+
--+    var key = event.keyCode;
--+
--+    if (38 == key) {
--+        //
--+        // up arrow
--+        //
--+        this.upSelect();
--+
--+    } else if (40 == key) {
--+        //
--+        // down arrow
--+        //
--+        this.downSelect();
--+    }
--+};
--+
--+TypeAheadControl.prototype.hideDrop = function() {
--+    var i = 0;
--+    if (null !== this.ie6hack) {
--+        while (i < this.ie6hack.length) {
--+            this.ie6hack[i].style.visibility = 'visible';
--+            i++;
--+        }
--+    }
--+    this.dropDown.style.visibility = 'hidden';
--+    this.textBox.setAttribute('aria-expanded', 'false');
--+
--+
--+    if (-1 == this.dropDown.current) {
--+        this.doUnselected();
--+    }
--+};
--+
--+TypeAheadControl.prototype.showDrop = function() {
--+    var i = 0;
--+    if (null !== this.ie6hack) {
--+        while (i < this.ie6hack.length) {
--+            this.ie6hack[i].style.visibility = 'hidden';
--+            i++;
--+        }
--+    }
--+    this.dropDown.style.visibility = 'visible';
--+    this.textBox.setAttribute('aria-expanded', 'true');
--+};
--+
--+
--+TypeAheadControl.prototype.doSelected = function() {
--+    this.submit.disabled = false;
--+};
--+
--+TypeAheadControl.prototype.doUnselected = function() {
--+    this.submit.disabled = true;
--+    this.textBox.setAttribute('aria-activedescendant', '');
--+};
--+
--+TypeAheadControl.prototype.handleChange = function() {
--+
--+    var val = this.textBox.value;
--+    var res = this.getPossible(val);
--+
--+
--+    if (0 === val.length || 
--+        0 === res.length ||
--+        (!this.alwaysShow && this.maxResults < res.length)) {
--+        this.hideDrop();
--+        this.doUnselected();
--+        this.results = [];
--+        this.dropDown.current = -1;
--+    } else {
--+        this.results = res;
--+        this.populateDropDown(res);
--+        if (1 == res.length) {
--+            this.select(this.dropDown.childNodes[0]);
--+            this.doSelected();
--+        } else {
--+            this.doUnselected();
--+        }
--+    }
--+};
--+
--+//
--+// A lot of the stuff below comes from 
--+// http://www.webreference.com/programming/javascript/ncz/column2
--+//
--+// With thanks to Nicholas C Zakas
--+//
--+TypeAheadControl.prototype.populateDropDown = function(list) {
--+    this.dropDown.innerHTML = '';
--+    var i = 0;
--+    var li;
--+    var img;
--+    var str;
--+
--+    while (i < list.length) {
--+        li = document.createElement('li');
--+        li.id='IdPSelectOption' + i;
--+        str = list[i][0];
--+
--+	if (null !== list[i][2]) {
--+
--+	    img = document.createElement('img');
--+	    img.src = list[i][2];
--+	    img.width = 16;
--+	    img.height = 16;
--+	    img.alt = '';
--+	    li.appendChild(img);
--+	    //
--+	    // trim string back further in this case
--+	    //
--+	    if (str.length > this.maxchars - 2) {
--+		str = str.substring(0, this.maxchars - 2);
--+	    }
--+	    str = ' ' + str;
--+	} else {
--+	    if (str.length > this.maxchars) {
--+		str = str.substring(0, this.maxchars);
--+	    }
--+	}
--+        li.appendChild(document.createTextNode(str));
--+        li.setAttribute('role', 'option');
--+        this.dropDown.appendChild(li);
--+        i++;
--+    }
--+    var off = this.getXY();
--+    this.dropDown.style.left = off[0] + 'px';
--+    this.dropDown.style.top = off[1] + 'px';
--+    this.showDrop();
--+};
--+
--+TypeAheadControl.prototype.getXY = function() {
--+
--+    var node = this.textBox;
--+    var sumX = 0;
--+    var sumY = node.offsetHeight;
--+   
--+    while(node.tagName != 'BODY') {
--+        sumX += node.offsetLeft;
--+        sumY += node.offsetTop;
--+        node = node.offsetParent;
--+    }
--+    //
--+    // And add in the offset for the Body
--+    //
--+    sumX += node.offsetLeft;
--+    sumY += node.offsetTop;
--+
--+    return [sumX, sumY];
--+};
--+
--+TypeAheadControl.prototype.select = function(selected) {
--+    var i = 0;
--+    var node;
--+    this.dropDown.current = -1;
--+    this.doUnselected();
--+    while (i < this.dropDown.childNodes.length) {
--+        node = this.dropDown.childNodes[i];
--+        if (node == selected) {
--+            //
--+            // Highlight it
--+            //
--+            node.className = 'IdPSelectCurrent';
--+            node.setAttribute('aria-selected', 'true');
--+            this.textBox.setAttribute('aria-activedescendant', 'IdPSelectOption' + i);
--+
--+            //
--+            // turn on the button
--+            //
--+            this.doSelected();
--+            //
--+            // setup the cursor
--+            //
--+            this.dropDown.current = i;
--+            //
--+            // and the value for the Server
--+            //
--+            this.origin.value = this.results[i][1];
--+            this.origin.textValue = this.results[i][0];
--+        } else {
--+            node.setAttribute('aria-selected', 'false');
--+            node.className = '';
--+        }
--+        i++;
--+    }
--+    this.textBox.focus();
--+};
--+
--+TypeAheadControl.prototype.downSelect = function() {
--+    if (this.results.length > 0) {
--+
--+        if (-1 == this.dropDown.current) {
--+            //
--+            // mimic a select()
--+            //
--+            this.dropDown.current = 0;
--+            this.dropDown.childNodes[0].className = 'IdPSelectCurrent';
--+            this.dropDown.childNodes[0].setAttribute('aria-selected', 'true');
--+            this.textBox.setAttribute('aria-activedescendant', 'IdPSelectOption' + 0);
--+            this.doSelected();
--+            this.origin.value = this.results[0][1];
--+            this.origin.textValue = this.results[0][0];
--+
--+        } else if (this.dropDown.current < (this.results.length-1)) {
--+            //
--+            // turn off highlight
--+            //
--+            this.dropDown.childNodes[this.dropDown.current].className = '';
--+            //
--+            // move cursor
--+            //
--+            this.dropDown.current++;
--+            //
--+            // and 'select'
--+            //
--+            this.dropDown.childNodes[this.dropDown.current].className = 'IdPSelectCurrent';
--+            this.dropDown.childNodes[this.dropDown.current].setAttribute('aria-selected', 'true');
--+            this.textBox.setAttribute('aria-activedescendant', 'IdPSelectOption' + this.dropDown.current);
--+            this.doSelected();
--+            this.origin.value = this.results[this.dropDown.current][1];
--+            this.origin.textValue = this.results[this.dropDown.current][0];
--+
--+        }
--+    }
--+};
--+
--+
--+TypeAheadControl.prototype.upSelect = function() {
--+    if ((this.results.length > 0) &&
--+        (this.dropDown.current > 0)) {
--+    
--+            //
--+            // turn off highlight
--+            //
--+            this.dropDown.childNodes[this.dropDown.current].className = '';
--+            //
--+            // move cursor
--+            //
--+            this.dropDown.current--;
--+            //
--+            // and 'select'
--+            //
--+            this.dropDown.childNodes[this.dropDown.current].className = 'IdPSelectCurrent';
--+            this.dropDown.childNodes[this.dropDown.current].setAttribute('aria-selected', 'true');
--+            this.textBox.setAttribute('aria-activedescendant', 'IdPSelectOption' + this.dropDown.current);
--+            this.doSelected();
--+            this.origin.value = this.results[this.dropDown.current][1];
--+            this.origin.textValue = this.results[this.dropDown.current][0];
--+        }
--+};
--+ 
--+/** @class IdP Selector UI */
--+function IdPSelectLanguages(){
--+    //
--+    // Globalization stuff
--+    //
--+    this.langBundles = {
--+    'en': {
--+        'fatal.divMissing': '<div> specified  as "insertAtDiv" could not be located in the HTML',
--+        'fatal.noXMLHttpRequest': 'Browser does not support XMLHttpRequest, unable to load IdP selection data',
--+        'fatal.wrongProtocol' : 'Policy supplied to DS was not "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',
--+        'fatal.wrongEntityId' : 'entityId supplied by SP did not match configuration',
--+        'fatal.noData' : 'Metadata download returned no data',
--+        'fatal.loadFailed': 'Failed to download metadata from ',
--+        'fatal.noparms' : 'No parameters to discovery session and no defaultReturn parameter configured',
--+        'fatal.noReturnURL' : "No URL return parameter provided",
--+        'fatal.badProtocol' : "Return request must start with https:// or http://",
--+        'idpPreferred.label': 'Use a suggested selection:',
--+        'idpEntry.label': 'Or enter your organization\'s name',
--+        'idpEntry.NoPreferred.label': 'Enter your organization\'s name',
--+        'idpList.label': 'Or select your organization from the list below',
--+        'idpList.NoPreferred.label': 'Select your organization from the list below',
--+        'idpList.defaultOptionLabel': 'Please select your organization...',
--+        'idpList.showList' : 'Allow me to pick from a list',
--+        'idpList.showSearch' : 'Allow me to specify the site',
--+        'submitButton.label': 'Continue',
--+        'helpText': 'Help',
--+        'defaultLogoAlt' : 'DefaultLogo'
--+    },
--+    'de': {
--+        'fatal.divMissing': 'Das notwendige Div Element fehlt',
--+        'fatal.noXMLHttpRequest': 'Ihr Webbrowser unterst\u00fctzt keine XMLHttpRequests, IdP-Auswahl kann nicht geladen werden',
--+        'fatal.wrongProtocol' : 'DS bekam eine andere Policy als "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',
--+        'fatal.wrongEntityId' : 'Die entityId ist nicht korrekt',
--+        'fatal.loadFailed': 'Metadaten konnten nicht heruntergeladen werden: ',
--+        'fatal.noparms' : 'Parameter f\u00fcr das Discovery Service oder \'defaultReturn\' fehlen',
--+        'fatal.noReturnURL' : "URL return Parmeter fehlt",
--+        'fatal.badProtocol' : "return Request muss mit https:// oder http:// beginnen",
--+        'idpPreferred.label': 'Vorherige Auswahl:',
--+        'idpEntry.label': 'Oder geben Sie den Namen (oder Teile davon) an:',
--+        'idpEntry.NoPreferred.label': 'Namen (oder Teile davon) der Institution angeben:',
--+        'idpList.label': 'Oder w\u00e4hlen Sie Ihre Institution aus einer Liste:',
--+        'idpList.NoPreferred.label': 'Institution aus folgender Liste w\u00e4hlen:',
--+        'idpList.defaultOptionLabel': 'W\u00e4hlen Sie Ihre Institution aus...',
--+        'idpList.showList' : 'Institution aus einer Liste w\u00e4hlen',
--+        'idpList.showSearch' : 'Institution selbst angeben',
--+        'submitButton.label': 'OK',
--+        'helpText': 'Hilfe',
--+        'defaultLogoAlt' : 'Standard logo'
--+        },
--+    'ja': {
--+        'fatal.divMissing': '"insertAtDiv" の ID を持つ <div> が HTML 中に存在しません',
--+        'fatal.noXMLHttpRequest': 'ブラウザが XMLHttpRequest をサポートしていないので IdP 情報を取得できません',
--+        'fatal.wrongProtocol' : 'DSへ渡された Policy パラメータが "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single" ではありません',
--+        'fatal.wrongEntityId' : 'SP から渡された entityId が設定値と異なります',
--+        'fatal.noData' : 'メタデータが空です',
--+        'fatal.loadFailed': '次の URL からメタデータをダウンロードできませんでした: ',
--+        'fatal.noparms' : 'DSにパラメータが渡されておらず defaultReturn も設定されていません',
--+        'fatal.noReturnURL' : "戻り URL が指定されていません",
--+        'fatal.badProtocol' : "戻り URL は https:// か http:// で始まらなければなりません",
--+        'idpPreferred.label': '選択候補の IdP:',
--+        'idpEntry.label': 'もしくはあなたの所属機関名を入力してください',
--+        'idpEntry.NoPreferred.label': 'あなたの所属機関名を入力してください',
--+        'idpList.label': 'もしくはあなたの所属機関を選択してください',
--+        'idpList.NoPreferred.label': 'あなたの所属機関を一覧から選択してください',
--+        'idpList.defaultOptionLabel': '所属機関を選択してください...',
--+        'idpList.showList' : '一覧から選択する',
--+        'idpList.showSearch' : '機関名を入力する',
--+        'submitButton.label': '選択',
--+        'helpText': 'Help',
--+        'defaultLogoAlt' : 'DefaultLogo'
--+    },
--+    'pt-br': {
--+        'fatal.divMissing': 'A tag <div> com "insertAtDiv" não foi encontrada no arquivo HTML',
--+        'fatal.noXMLHttpRequest': 'Seu navegador não suporta "XMLHttpRequest", impossível de carregador os dados do IdP selecionado',
--+        'fatal.wrongProtocol' : 'A política "Policy" fornecida para o DS não foi "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',
--+        'fatal.wrongEntityId' : 'entityId oferecido pelo SP não confere com o da configuração',
--+        'fatal.noData' : 'O arquivo de metadados não retornou nada;',
--+        'fatal.loadFailed': 'Falhou ao realizar download do metadado de ',
--+        'fatal.noparms' : 'Sem parâmetros para sessão de descoberta e sem parâmetro "defaultReturn" configurado',
--+        'fatal.noReturnURL' : "Não foi definida um endereço (URL) de retorno no parâmetro",
--+        'fatal.badProtocol' : "Retorno do endereço requisitado deve começar com https:// ou http://",
--+        'idpPreferred.label': 'Use estas Instituições sugeridas: ',
--+        'idpEntry.label': 'Ou informe o nome da sua Instituição',
--+        'idpEntry.NoPreferred.label': 'Informe o nome da sua Instituição',
--+        'idpList.label': 'Ou selecione sua Instituição através da lista abaixo',
--+        'idpList.NoPreferred.label': 'Selecione sua Instituição através da lista abaixo',
--+        'idpList.defaultOptionLabel': 'Por favor, selecione sua Instituição: ',
--+        'idpList.showList' : 'Permitir que eu escolha um IdP através de uma lista',
--+        'idpList.showSearch' : 'Permitir que eu especifique o IdP',
--+        'submitButton.label': 'Continuar ',
--+        'helpText': 'Ajuda',
--+        'defaultLogoAlt' : 'Logo padrão'
--+        }
--+    };
--+}
--+function IdPSelectUI() {
--+    //
--+    // module locals
--+    //
--+    var idpData;
--+    var base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
--+    var idpSelectDiv;
--+    var lang;
--+    var majorLang;
--+    var defaultLang;
--+    var langBundle;
--+    var defaultLangBundle;
--+    var defaultLogo;
--+    var defaultLogoWidth;
--+    var defaultLogoHeight;
--+    var minWidth;
--+    var minHeight;
--+    var maxWidth;
--+    var maxHeight;
--+    var bestRatio;
--+
--+    //
--+    // Parameters passed into our closure
--+    //
--+    var preferredIdP;
--+    var maxPreferredIdPs;
--+    var helpURL;
--+    var ie6Hack;
--+    var samlIdPCookieTTL;
--+    var maxIdPCharsDropDown;
--+    var maxIdPCharsButton;
--+    var maxIdPCharsAltTxt;
--+    var alwaysShow;
--+    var maxResults;
--+    var ignoreKeywords;
--+    var showListFirst;
--+    var noWriteCookie;
--+    var ignoreURLParams;
--+
--+    //
--+    // The cookie contents
--+    //
--+    var userSelectedIdPs;
--+    //
--+    // Anchors used inside autofunctions
--+    //
--+    var idpEntryDiv;
--+    var idpListDiv;
--+    var idpSelect;
--+    var listButton;
--+    
--+    //
--+    // local configuration
--+    //
--+    var idPrefix = 'idpSelect';
--+    var classPrefix = 'IdPSelect';
--+    var dropDownControl;
--+
--+    //
--+    // DS protocol configuration
--+    //
--+    var returnString = '';
--+    var returnBase='';
--+    var returnParms= [];
--+    var returnIDParam = 'entityID';
--+
--+    // *************************************
--+    // Public functions
--+    // *************************************
--+    
--+    /**
--+       Draws the IdP Selector UI on the screen.  This is the main
--+       method for the IdPSelectUI class.
--+    */
--+    this.draw = function(parms){
--+
--+        if (!setupLocals(parms)) {
--+            return;
--+        }
--+
--+        idpSelectDiv = document.getElementById(parms.insertAtDiv);
--+        if(!idpSelectDiv){
--+            fatal(getLocalizedMessage('fatal.divMissing'));
--+            return;
--+        }
--+
--+        if (!load(parms.dataSource)) {
--+            return;
--+        }
--+        deDupe();
--+        stripHidden(parms.hiddenIdPs);
--+
--+        idpData.sort(function(a,b) {return getLocalizedName(a).localeCompare(getLocalizedName(b));});
--+        
--+        var idpSelector = buildIdPSelector();
--+        idpSelectDiv.appendChild(idpSelector);
--+        dropDownControl.draw(parms.setFocusTextBox);
--+    } ;
--+    
--+    // *************************************
--+    // Private functions
--+    //
--+    // Data Manipulation
--+    //
--+    // *************************************
--+
--+    /**
--+       Copies the "parameters" in the function into namesspace local
--+       variables.  This means most of the work is done outside the
--+       IdPSelectUI object
--+    */
--+
--+    var setupLocals = function (paramsSupplied) {
--+        //
--+        // Copy parameters in
--+        //
--+        var suppliedEntityId;
--+
--+        preferredIdP = paramsSupplied.preferredIdP;
--+        maxPreferredIdPs = paramsSupplied.maxPreferredIdPs;
--+        helpURL = paramsSupplied.helpURL;
--+        ie6Hack = paramsSupplied.ie6Hack;
--+        samlIdPCookieTTL = paramsSupplied.samlIdPCookieTTL;
--+        alwaysShow = paramsSupplied.alwaysShow;
--+        maxResults = paramsSupplied.maxResults;
--+        ignoreKeywords = paramsSupplied.ignoreKeywords;
--+        if (paramsSupplied.showListFirst) {
--+            showListFirst = paramsSupplied.showListFirst;
--+        } else {
--+            showListFirst = false;
--+        }
--+        if (paramsSupplied.noWriteCookie) {
--+            noWriteCookie = paramsSupplied.noWriteCookie;
--+        } else {
--+            noWriteCookie = false;
--+        }
--+        if (paramsSupplied.ignoreURLParams) {
--+            ignoreURLParams = paramsSupplied.ignoreURLParams;
--+        } else {
--+            ignoreURLParams = false;
--+        }
--+
--+        defaultLogo = paramsSupplied.defaultLogo;
--+        defaultLogoWidth = paramsSupplied.defaultLogoWidth;
--+        defaultLogoHeight = paramsSupplied.defaultLogoHeight;
--+        minWidth = paramsSupplied.minWidth;
--+        minHeight = paramsSupplied.minHeight;
--+        maxWidth = paramsSupplied.maxWidth;
--+        maxHeight = paramsSupplied.maxHeight;
--+        bestRatio = paramsSupplied.bestRatio;
--+        maxIdPCharsButton = paramsSupplied.maxIdPCharsButton;
--+        maxIdPCharsDropDown = paramsSupplied.maxIdPCharsDropDown;
--+        maxIdPCharsAltTxt = paramsSupplied.maxIdPCharsAltTxt;
--+
--+        var lang;
--+
--+        if (typeof navigator == 'undefined') {
--+            lang = paramsSupplied.defaultLanguage;
--+        } else {
--+            lang = navigator.language || navigator.userLanguage || paramsSupplied.defaultLanguage;
--+        }
--+        lang = lang.toLowerCase();
--+
--+        if (lang.indexOf('-') > 0) {
--+            majorLang = lang.substring(0, lang.indexOf('-'));
--+        }
--+
--+        var providedLangs = new IdPSelectLanguages();
--+
--+        defaultLang = paramsSupplied.defaultLanguage;
--+
--+        if (typeof paramsSupplied.langBundles != 'undefined' && typeof paramsSupplied.langBundles[lang] != 'undefined') {
--+            langBundle = paramsSupplied.langBundles[lang];
--+        } else if (typeof providedLangs.langBundles[lang] != 'undefined') {
--+            langBundle = providedLangs.langBundles[lang];
--+        } else if (typeof majorLang != 'undefined') {
--+            if (typeof paramsSupplied.langBundles != 'undefined' && typeof paramsSupplied.langBundles[majorLang] != 'undefined') {
--+                langBundle = paramsSupplied.langBundles[majorLang];
--+            } else if (typeof providedLangs.langBundles[majorLang] != 'undefined') {
--+                langBundle = providedLangs.langBundles[majorLang];
--+            }
--+        }
--+        
--+        if (typeof paramsSupplied.langBundles != 'undefined' && typeof paramsSupplied.langBundles[paramsSupplied.defaultLanguage] != 'undefined') {
--+            defaultLangBundle = paramsSupplied.langBundles[paramsSupplied.defaultLanguage];
--+        } else {
--+            defaultLangBundle = providedLangs.langBundles[paramsSupplied.defaultLanguage];
--+        }
--+
--+        //
--+        // Setup Language bundles
--+        //
--+        if (!defaultLangBundle) {
--+            fatal('No languages work');
--+            return false;
--+        }
--+        if (!langBundle) {
--+            debug('No language support for ' + lang);
--+            langBundle = defaultLangBundle;
--+        }
--+
--+        if (paramsSupplied.testGUI) {
--+            //
--+            // no policing of parms
--+            //
--+            return true;
--+        }
--+        //
--+        // Now set up the return values from the URL
--+        //
--+        var policy = 'urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single';
--+        var i;
--+        var isPassive = false;
--+        var parms;
--+        var parmPair;
--+        var win = window;
--+        while (null !== win.parent && win !== win.parent) {
--+            win = win.parent;
--+        }
--+        var loc = win.location;
--+        var parmlist = loc.search;
--+        if (ignoreURLParams || null == parmlist || 0 == parmlist.length || parmlist.charAt(0) != '?') {
--+
--+            if ((null == paramsSupplied.defaultReturn)&& !ignoreURLParams) {
--+
--+                fatal(getLocalizedMessage('fatal.noparms'));
--+                return false;
--+            }
--+            //
--+            // No parameters, so just collect the defaults
--+            //
--+            suppliedEntityId  = paramsSupplied.myEntityID;
--+            returnString = paramsSupplied.defaultReturn;
--+            if (null != paramsSupplied.defaultReturnIDParam) {
--+                returnIDParam = paramsSupplied.defaultReturnIDParam;
--+            }
--+            
--+        } else {
--+            parmlist = parmlist.substring(1);
--+
--+            //
--+            // protect against various hideousness by decoding. We re-encode just before we push
--+            //
--+
--+            parms = parmlist.split('&');
--+            if (parms.length === 0) {
--+
--+                fatal(getLocalizedMessage('fatal.noparms'));
--+                return false;
--+            }
--+
--+            for (i = 0; i < parms.length; i++) {
--+                parmPair = parms[i].split('=');
--+                if (parmPair.length != 2) {
--+                    continue;
--+                }
--+                if (parmPair[0] == 'entityID') {
--+                    suppliedEntityId = decodeURIComponent(parmPair[1]);
--+                } else if (parmPair[0] == 'return') {
--+                    returnString = decodeURIComponent(parmPair[1]);
--+                } else if (parmPair[0] == 'returnIDParam') {
--+                    returnIDParam = decodeURIComponent(parmPair[1]);
--+                } else if (parmPair[0] == 'policy') {
--+                    policy = decodeURIComponent(parmPair[1]);
--+                } else if (parmPair[0] == 'isPassive') {
--+                    isPassive = (parmPair[1].toUpperCase() == "TRUE");
--+                }
--+            }
--+        }
--+        if (policy != 'urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single') {
--+            fatal(getLocalizedMessage('fatal.wrongProtocol'));
--+            return false;
--+        }
--+        if (paramsSupplied.myEntityID !== null && paramsSupplied.myEntityID != suppliedEntityId) {
--+            fatal(getLocalizedMessage('fatal.wrongEntityId') + '"' + suppliedEntityId + '" != "' + paramsSupplied.myEntityID + '"');
--+            return false;
--+        }
--+        if (null === returnString || returnString.length === 0) {
--+            fatal(getLocalizedMessage('fatal.noReturnURL'));
--+            return false;
--+        }
--+        if (!validProtocol(returnString)) {
--+            fatal(getLocalizedMessage('fatal.badProtocol'));
--+            return false;
--+        }
--+
--+        //
--+        // isPassive
--+        //
--+        if (isPassive) {
--+            var prefs = retrieveUserSelectedIdPs();
--+            if (prefs.length == 0) {
--+                //
--+                // no preference, go back
--+                //
--+                location.href = returnString;
--+                return false;
--+            } else {
--+                var retString = returnIDParam + '=' + encodeURIComponent(prefs[0]);
--+                //
--+                // Compose up the URL
--+                //
--+                if (returnString.indexOf('?') == -1) {
--+                    retString = '?' + retString;
--+                } else {
--+                    retString = '&' + retString;
--+                }
--+                location.href = returnString + retString;
--+                return false;
--+            }            
--+        }
--+
--+        //
--+        // Now split up returnString
--+        //
--+        i = returnString.indexOf('?');
--+        if (i < 0) {
--+            returnBase = returnString;
--+            return true;
--+        }
--+        returnBase = returnString.substring(0, i);
--+        parmlist = returnString.substring(i+1);
--+        parms = parmlist.split('&');
--+        for (i = 0; i < parms.length; i++) {
--+            parmPair = parms[i].split('=');
--+            if (parmPair.length != 2) {
--+                continue;
--+            }
--+            parmPair[1] = decodeURIComponent(parmPair[1]);
--+            returnParms.push(parmPair);
--+        }
--+        return true;
--+    };
--+
--+    /** Deduplicate by entityId */
--+    var deDupe = function() {
--+        var names = [];
--+        var j;
--+        for (j = 0; j < idpData.length; ) {
--+            var eid = getEntityId(idpData[j]);
--+            if (null == names[eid]) {
--+                names[eid] = eid;
--+                j = j + 1;
--+            } else {
--+                idpData.splice(j, 1);
--+            }
--+        }
--+    }
--+
--+    /**
--+       Strips the supllied IdP list from the idpData
--+    */
--+    var stripHidden = function(hiddenList) {
--+    
--+        if (null == hiddenList || 0 == hiddenList.length) {
--+            return;
--+        }
--+        var i;
--+        var j;
--+        for (i = 0; i < hiddenList.length; i++) {
--+            for (j = 0; j < idpData.length; j++) {
--+                if (getEntityId(idpData[j]) == hiddenList[i]) {
--+                    idpData.splice(j, 1);
--+                    break;
--+                }
--+            }
--+        }
--+    }
--+
--+
--+    /**
--+     * Strip the "protocol://host" bit out of the URL and check the protocol
--+     * @param the URL to process
--+     * @return whether it starts with http: or https://
--+     */
--+
--+    var validProtocol = function(s) {
--+        if (null === s) {
--+            return false;
--+        }
--+        var marker = "://";
--+        var protocolEnd = s.indexOf(marker);
--+        if (protocolEnd < 0) {
--+            return false;
--+        }
--+        s = s.substring(0, protocolEnd);
--+        if (s == "http" || s== "https") {
--+            return true;
--+        }
--+        return false;
--+    };
--+
--+    /**
--+     * We need to cache bust on IE.  So how do we know?  Use a bigger hammer.
--+     */
--+    var isIE = function() {
--+        if (null == navigator) {
--+            return false;
--+        }
--+        var browserName = navigator.appName;
--+        if (null == browserName) {
--+            return false;
--+        }
--+        return (browserName == 'Microsoft Internet Explorer') ;
--+    } ;
--+
--+
--+    /**
--+       Loads the data used by the IdP selection UI.  Data is loaded 
--+       from a JSON document fetched from the given url.
--+      
--+       @param {Function} failureCallback A function called if the JSON
--+       document can not be loaded from the source.  This function will
--+       passed the {@link XMLHttpRequest} used to request the JSON data.
--+    */
--+    var load = function(dataSource){
--+        var xhr = null;
--+
--+        try {
--+            xhr = new XMLHttpRequest();
--+        } catch (e) {}
--+        if (null == xhr) {
--+            //
--+            // EDS24. try to get 'Microsoft.XMLHTTP'
--+            //
--+            try {
--+                xhr = new ActiveXObject("Microsoft.XMLHTTP");
--+            } catch (e) {}
--+        }
--+        if (null == xhr) {
--+            //
--+            // EDS35. try to get 'Microsoft.XMLHTTP'
--+            //
--+            try {
--+                xhr = new  ActiveXObject('MSXML2.XMLHTTP.3.0');
--+            } catch (e) {}
--+        }
--+        if (null == xhr) {
--+            fatal(getLocalizedMessage('fatal.noXMLHttpRequest'));
--+            return false;
--+        }
--+
--+        if (isIE()) {
--+            //
--+            // cache bust (for IE)
--+            //
--+            dataSource += '?random=' + (Math.random()*1000000);
--+        }
--+
--+        //
--+        // Grab the data
--+        //
--+        xhr.open('GET', dataSource, false);
--+        if (typeof xhr.overrideMimeType == 'function') {
--+            xhr.overrideMimeType('application/json');
--+        }
--+        xhr.send(null);
--+        
--+        if(xhr.status == 200){
--+            //
--+            // 200 means we got it OK from as web source
--+            // if locally loading its 0.  Go figure
--+            //
--+            var jsonData = xhr.responseText;
--+            if(jsonData === null){
--+                fatal(getLocalizedMessage('fatal.noData'));
--+                return false;
--+            }
--+
--+            //
--+            // Parse it
--+            //
--+
--+            idpData = JSON.parse(jsonData);
--+
--+        }else{
--+            fatal(getLocalizedMessage('fatal.loadFailed') + dataSource);
--+            return false;
--+        }
--+        return true;
--+    };
--+
--+    /**
--+       Returns the idp object with the given name.
--+
--+       @param (String) the name we are interested in
--+       @return (Object) the IdP we care about
--+    */
--+
--+    var getIdPFor = function(idpName) {
--+
--+        for (var i = 0; i < idpData.length; i++) {
--+            if (getEntityId(idpData[i]) == idpName) {
--+                return idpData[i];
--+            }
--+        }
--+        return null;
--+    };
--+
--+    /**
--+       Returns a suitable image from the given IdP
--+       
--+       @param (Object) The IdP
--+       @return Object) a DOM object suitable for insertion
--+       
--+       TODO - rather more careful selection
--+    */
--+
--+    var getImageForIdP = function(idp, useDefault) {
--+
--+        var getBestFit = function(language) {
--+            //
--+            // See GetLocalizedEntry
--+            //
--+            var bestFit = null;
--+            var i;
--+            if (null == idp.Logos) {
--+                return null;
--+            }
--+            for (i in idp.Logos) {
--+                if (idp.Logos[i].lang == language &&
--+                    idp.Logos[i].width != null &&  
--+                    idp.Logos[i].width >= minWidth &&
--+                    idp.Logos[i].height != null && 
--+                    idp.Logos[i].height >= minHeight) {
--+                    if (bestFit === null) {
--+                        bestFit = idp.Logos[i];
--+                    } else {
--+                        me = Math.abs(bestRatio - Math.log(idp.Logos[i].width/idp.Logos[i].height));
--+                        him = Math.abs(bestRatio - Math.log(bestFit.width/bestFit.height));
--+                        if (him > me) {
--+                            bestFit = idp.Logos[i];
--+                        }
--+                    }
--+                }
--+            }
--+            return bestFit;
--+        } ;
--+
--+        var bestFit = null;
--+        var img = document.createElement('img');
--+        setClass(img, 'IdPImg');
--+
--+        bestFit = getBestFit(lang);
--+        if (null === bestFit && typeof majorLang != 'undefined') {
--+            bestFit = getBestFit(majorLang);
--+        }
--+        if (null === bestFit) {
--+            bestFit = getBestFit(null);
--+        }
--+        if (null === bestFit) {
--+            bestFit = getBestFit(defaultLang);
--+        }
--+               
--+        if (null === bestFit) {
--+            if (!useDefault) {
--+                return null;
--+            }
--+            img.src = defaultLogo;
--+            img.width = defaultLogoWidth;
--+            img.height = defaultLogoHeight;
--+            img.alt = getLocalizedMessage('defaultLogoAlt');
--+            return img;
--+        }
--+
--+        img.src = bestFit.value;
--+        var altTxt = getLocalizedName(idp);
--+        if (altTxt.length > maxIdPCharsAltTxt) {
--+            altTxt = altTxt.substring(0, maxIdPCharsAltTxt) + '...';
--+        }
--+        img.alt = altTxt;
--+
--+        var w = bestFit.width;
--+        var h = bestFit.height;
--+        if (w>maxWidth) {
--+            h = (maxWidth/w) * h;
--+            w = maxWidth;
--+        }
--+        if (h> maxHeight) {
--+            w = (maxHeight/h) * w;
--+            w = maxHeight;
--+        }
--+            
--+        img.setAttribute('width', w);
--+        img.setAttribute('height', h);
--+        return img;
--+    };
--+
--+    // *************************************
--+    // Private functions
--+    //
--+    // GUI Manipulation
--+    //
--+    // *************************************
--+    
--+    /**
--+       Builds the IdP selection UI.
--+
--+       Three divs. PreferredIdPTime, EntryTile and DropdownTile
--+      
--+       @return {Element} IdP selector UI
--+    */
--+    var buildIdPSelector = function(){
--+        var containerDiv = buildDiv('IdPSelector');
--+        var preferredTileExists;
--+        preferredTileExists = buildPreferredIdPTile(containerDiv);
--+        buildIdPEntryTile(containerDiv, preferredTileExists);
--+        buildIdPDropDownListTile(containerDiv, preferredTileExists);
--+        return containerDiv;
--+    };
--+
--+    /**
--+      Builds a button for the provided IdP
--+        <div class="preferredIdPButton">
--+          <a href="XYX" onclick=setparm('ABCID')>
--+            <div class=
--+            <img src="https:\\xyc.gif"> <!-- optional -->
--+            XYX Text
--+          </a>
--+        </div>
--+
--+      @param (Object) The IdP
--+      
--+      @return (Element) preselector for the IdP
--+    */
--+
--+    var composePreferredIdPButton = function(idp, uniq, useDefault) {
--+        var div = buildDiv(undefined, 'PreferredIdPButton');
--+        var aval = document.createElement('a');
--+        var retString = returnIDParam + '=' + encodeURIComponent(getEntityId(idp));
--+        var retVal = returnString;
--+        var img = getImageForIdP(idp, useDefault);
--+        //
--+        // Compose up the URL
--+        //
--+        if (retVal.indexOf('?') == -1) {
--+            retString = '?' + retString;
--+        } else {
--+            retString = '&' + retString;
--+        }
--+        aval.href = retVal + retString;
--+        aval.onclick = function () {
--+            selectIdP(getEntityId(idp));
--+        };
--+        if (null != img) {
--+            var imgDiv=buildDiv(undefined, 'PreferredIdPImg');
--+            imgDiv.appendChild(img);
--+            aval.appendChild(imgDiv);
--+        }
--+
--+        var nameDiv = buildDiv(undefined, 'TextDiv');
--+        var nameStr = getLocalizedName(idp);
--+        if (nameStr.length > maxIdPCharsButton) {
--+            nameStr = nameStr.substring(0, maxIdPCharsButton) + '...';
--+        }
--+        div.title = nameStr;
--+        nameDiv.appendChild(document.createTextNode(nameStr));
--+        aval.appendChild(nameDiv);
--+
--+        div.appendChild(aval);
--+        return div;
--+    };
--+
--+    /**
--+     * Builds and populated a text Div
--+     */
--+    var buildTextDiv = function(parent, textId)
--+    {
--+        var div  = buildDiv(undefined, 'TextDiv');
--+        var introTxt = document.createTextNode(getLocalizedMessage(textId)); 
--+        div.appendChild(introTxt);
--+        parent.appendChild(div);
--+    } ;
--+
--+    var setSelector = function (selector, selected) {
--+        if (null === selected || 0 === selected.length || '-' == selected.value) {
--+            return;
--+        }
--+        var i = 0;
--+        while (i < selector.options.length) {
--+            if (selector.options[i].value == selected) {
--+                selector.options[i].selected = true;
--+                break;
--+            }
--+            i++;
--+        }
--+    }
--+
--+    /**
--+       Builds the preferred IdP selection UI (top half of the UI w/ the
--+       IdP buttons)
--+
--+       <div id=prefix+"PreferredIdPTile">
--+          <div> [see comprosePreferredIdPButton </div>
--+          [repeated]
--+       </div>
--+      
--+       @return {Element} preferred IdP selection UI
--+    */
--+    var buildPreferredIdPTile = function(parentDiv) {
--+
--+        var preferredIdPs = getPreferredIdPs();
--+        if (0 === preferredIdPs.length) {
--+            return false;
--+        }
--+
--+        var atLeastOneImg = false;
--+        for(var i = 0 ; i < maxPreferredIdPs && i < preferredIdPs.length; i++){
--+            if (preferredIdPs[i] && getImageForIdP(preferredIdPs[i], false)) {
--+                atLeastOneImg = true;
--+            }
--+        }
--+        
--+        var preferredIdPDIV;
--+        if (atLeastOneImg) {
--+            preferredIdPDIV = buildDiv('PreferredIdPTile');
--+        } else {
--+            preferredIdPDIV = buildDiv('PreferredIdPTileNoImg');
--+        }
--+
--+
--+        buildTextDiv(preferredIdPDIV, 'idpPreferred.label');
--+
--+
--+        for(var i = 0 ; i < maxPreferredIdPs && i < preferredIdPs.length; i++){
--+            if (preferredIdPs[i]) {
--+                var button = composePreferredIdPButton(preferredIdPs[i],i, atLeastOneImg);
--+                preferredIdPDIV.appendChild(button);
--+            }
--+        }
--+
--+        parentDiv.appendChild(preferredIdPDIV);
--+        return true;
--+    };
--+
--+    /**
--+     * Build the <form> from the return parameters
--+     */
--+
--+    var buildSelectForm = function ()
--+    {
--+        var form = document.createElement('form');
--+        idpEntryDiv.appendChild(form);
--+
--+        form.action = returnBase;
--+        form.method = 'GET';
--+        form.setAttribute('autocomplete', 'OFF');
--+        var i = 0;
--+        for (i = 0; i < returnParms.length; i++) {
--+            var hidden = document.createElement('input');
--+            hidden.setAttribute('type', 'hidden');
--+            hidden.name = returnParms[i][0];
--+            hidden.value= returnParms[i][1];
--+            form.appendChild(hidden);
--+        }
--+
--+        return form;
--+    } ;
--+
--+
--+    /**
--+       Build the manual IdP Entry tile (bottom half of UI with
--+       search-as-you-type field).
--+
--+       <div id = prefix+"IdPEntryTile">
--+         <form>
--+           <input type="text", id=prefix+"IdPSelectInput/> // select text box
--+           <input type="hidden" /> param to send
--+           <input type="submit" />
--+           
--+      
--+       @return {Element} IdP entry UI tile
--+    */
--+    var buildIdPEntryTile = function(parentDiv, preferredTile) {
--+
--+
--+        idpEntryDiv = buildDiv('IdPEntryTile');
--+        if (showListFirst) {
--+            idpEntryDiv.style.display = 'none';
--+        }
--+        
--+        var label = document.createElement('label');
--+        label.setAttribute('for', idPrefix + 'Input');
--+
--+        if (preferredTile) {
--+            buildTextDiv(label, 'idpEntry.label');
--+        } else {
--+            buildTextDiv(label, 'idpEntry.NoPreferred.label');
--+        }
--+
--+        var form = buildSelectForm();
--+        form.appendChild(label);
--+      
--+        var textInput = document.createElement('input');
--+        form.appendChild(textInput);
--+
--+        textInput.type='text';
--+        setID(textInput, 'Input');
--+
--+        var hidden = document.createElement('input');
--+        hidden.setAttribute('type', 'hidden');
--+        form.appendChild(hidden);
--+
--+        hidden.name = returnIDParam;
--+        hidden.value='-';
--+
--+        var button = buildContinueButton('Select');
--+        button.disabled = true;
--+        form.appendChild(button);
--+        
--+        form.onsubmit = function () {
--+            //
--+            // Make sure we cannot ask for garbage
--+            //
--+            if (null === hidden.value || 0 === hidden.value.length || '-' == hidden.value) {
--+                return false;
--+            }
--+            //
--+            // And always ask for the cookie to be updated before we continue
--+            //
--+            textInput.value = hidden.textValue;
--+            selectIdP(hidden.value);
--+            return true;
--+        };
--+
--+        dropDownControl = new TypeAheadControl(idpData, textInput, hidden, button, maxIdPCharsDropDown, getLocalizedName, getEntityId, geticon, ie6Hack, alwaysShow, maxResults, getKeywords);
--+
--+        var a = document.createElement('a');
--+        a.appendChild(document.createTextNode(getLocalizedMessage('idpList.showList')));
--+        a.href = '#';
--+        setClass(a, 'DropDownToggle');
--+        a.onclick = function() { 
--+            idpEntryDiv.style.display='none';
--+            setSelector(idpSelect, hidden.value);
--+            idpListDiv.style.display='inline';
--+            listButton.focus();
--+            return false;
--+        };
--+        idpEntryDiv.appendChild(a);
--+        buildHelpText(idpEntryDiv);
--+                                              
--+        parentDiv.appendChild(idpEntryDiv);
--+    };
--+    
--+    /**
--+       Builds the drop down list containing all the IdPs from which a
--+       user may choose.
--+
--+       <div id=prefix+"IdPListTile">
--+          <label for="idplist">idpList.label</label>
--+          <form action="URL from IDP Data" method="GET">
--+          <select name="param from IdP data">
--+             <option value="EntityID">Localized Entity Name</option>
--+             [...]
--+          </select>
--+          <input type="submit"/>
--+       </div>
--+        
--+       @return {Element} IdP drop down selection UI tile
--+    */
--+    var buildIdPDropDownListTile = function(parentDiv, preferredTile) {
--+        idpListDiv = buildDiv('IdPListTile');
--+        if (!showListFirst) {
--+            idpListDiv.style.display = 'none';
--+        }
--+
--+        var label = document.createElement('label');
--+        label.setAttribute('for', idPrefix + 'Selector');
--+
--+        if (preferredTile) {
--+            buildTextDiv(label, 'idpList.label');
--+        } else {
--+            buildTextDiv(label, 'idpList.NoPreferred.label');
--+        }
--+
--+        idpSelect = document.createElement('select');
--+        setID(idpSelect, 'Selector');
--+        idpSelect.name = returnIDParam;
--+        idpListDiv.appendChild(idpSelect);
--+        
--+        var idpOption = buildSelectOption('-', getLocalizedMessage('idpList.defaultOptionLabel'));
--+        idpOption.selected = true;
--+
--+        idpSelect.appendChild(idpOption);
--+    
--+        var idp;
--+        for(var i=0; i<idpData.length; i++){
--+            idp = idpData[i];
--+            idpOption = buildSelectOption(getEntityId(idp), getLocalizedName(idp));
--+            idpSelect.appendChild(idpOption);
--+        }
--+
--+        var form = buildSelectForm();
--+        form.appendChild(label);
--+        form.appendChild(idpSelect);
--+
--+        form.onsubmit = function () {
--+            //
--+            // The first entery isn't selectable
--+            //
--+            if (idpSelect.selectedIndex < 1) {
--+                return false;
--+            }
--+            //
--+            // otherwise update the cookie
--+            //
--+            selectIdP(idpSelect.options[idpSelect.selectedIndex].value);
--+            return true;
--+        };
--+
--+        var button = buildContinueButton('List');
--+        listButton = button;
--+        form.appendChild(button);
--+
--+        idpListDiv.appendChild(form);
--+
--+        //
--+        // The switcher
--+        //
--+        var a = document.createElement('a');
--+        a.appendChild(document.createTextNode(getLocalizedMessage('idpList.showSearch')));
--+        a.href = '#';
--+        setClass(a, 'DropDownToggle');
--+        a.onclick = function() { 
--+            idpEntryDiv.style.display='inline';
--+            idpListDiv.style.display='none';
--+            return false;
--+        };
--+        idpListDiv.appendChild(a);
--+        buildHelpText(idpListDiv);
--+
--+        parentDiv.appendChild(idpListDiv);
--+    };
--+
--+    /**
--+       Builds the 'continue' button used to submit the IdP selection.
--+      
--+       @return {Element} HTML button used to submit the IdP selection
--+    */
--+    var buildContinueButton = function(which) {
--+        var button  = document.createElement('input');
--+        button.setAttribute('type', 'submit');
--+        button.value = getLocalizedMessage('submitButton.label');
--+        setID(button, which + 'Button');
--+
--+        return button;
--+    };
--+
--+    /**
--+       Builds an aref to point to the helpURL
--+    */
--+
--+    var buildHelpText = function(containerDiv) {
--+        var aval = document.createElement('a');
--+        aval.href = helpURL;
--+        aval.appendChild(document.createTextNode(getLocalizedMessage('helpText')));
--+        setClass(aval, 'HelpButton');
--+        containerDiv.appendChild(aval);
--+    } ;
--+    
--+    /**
--+       Creates a div element whose id attribute is set to the given ID.
--+      
--+       @param {String} id ID for the created div element
--+       @param {String} [class] class of the created div element
--+       @return {Element} DOM 'div' element with an 'id' attribute
--+    */
--+    var buildDiv = function(id, whichClass){
--+        var div = document.createElement('div');
--+        if (undefined !== id) {
--+            setID(div, id);
--+        }
--+        if(undefined !== whichClass) {
--+
--+            setClass(div, whichClass);
--+        }
--+        return div;
--+    };
--+    
--+    /**
--+       Builds an HTML select option element
--+      
--+       @param {String} value value of the option when selected
--+       @param {String} label displayed label of the option
--+    */
--+    var buildSelectOption = function(value, text){
--+        var option = document.createElement('option');
--+        option.value = value;
--+        if (text.length > maxIdPCharsDropDown) {
--+            text = text.substring(0, maxIdPCharsDropDown);
--+        }
--+        option.appendChild(document.createTextNode(text));
--+        return option;
--+    };
--+    
--+    /**
--+       Sets the attribute 'id' on the provided object
--+       We do it through this function so we have a single
--+       point where we can prepend a value
--+       
--+       @param (Object) The [DOM] Object we want to set the attribute on
--+       @param (String) The Id we want to set
--+    */
--+
--+    var setID = function(obj, name) {
--+        obj.id = idPrefix + name;
--+    };
--+
--+    var setClass = function(obj, name) {
--+        obj.setAttribute('class', classPrefix + name);
--+    };
--+
--+    /**
--+       Returns the DOM object with the specified id.  We abstract
--+       through a function to allow us to prepend to the name
--+       
--+       @param (String) the (unprepended) id we want
--+    */
--+    var locateElement = function(name) {
--+        return document.getElementById(idPrefix + name);
--+    };
--+
--+    // *************************************
--+    // Private functions
--+    //
--+    // GUI actions.  Note that there is an element of closure going on
--+    // here since these names are invisible outside this module.
--+    // 
--+    //
--+    // *************************************
--+
--+    /**
--+     * Base helper function for when an IdP is selected
--+     * @param (String) The UN-encoded entityID of the IdP
--+    */
--+
--+    var selectIdP = function(idP) {
--+        updateSelectedIdPs(idP);
--+        saveUserSelectedIdPs(userSelectedIdPs);
--+    };
--+
--+    // *************************************
--+    // Private functions
--+    //
--+    // Localization handling
--+    //
--+    // *************************************
--+
--+    /**
--+       Gets a localized string from the given language pack.  This
--+       method uses the {@link langBundles} given during construction
--+       time.
--+
--+       @param {String} messageId ID of the message to retrieve
--+
--+       @return (String) the message
--+    */
--+    var getLocalizedMessage = function(messageId){
--+
--+        var message = langBundle[messageId];
--+        if(!message){
--+            message = defaultLangBundle[messageId];
--+        }
--+        if(!message){
--+            message = 'Missing message for ' + messageId;
--+        }
--+        
--+        return message;
--+    };
--+
--+    var getEntityId = function(idp) {
--+        return idp.entityID;
--+    };
--+
--+    /**
--+       Returns the icon information for the provided idp
--+
--+       @param (Object) an idp.  This should have an array 'names' with sub
--+        elements 'lang' and 'name'.
--+
--+       @return (String) The localized name
--+    */
--+    var geticon = function(idp) {
--+        var i;
--+
--+        if (null == idp.Logos) { 
--+            return null;
--+        }
--+        for (i =0; i < idp.Logos.length; i++) {
--+	    var logo = idp.Logos[i];
--+
--+	    if (logo.height == "16" && logo.width == "16") {
--+		if (null == logo.lang ||
--+		    lang == logo.lang ||
--+		    (typeof majorLang != 'undefined' && majorLang == logo.lang) ||
--+		    defaultLang == logo.lang) {
--+		    return logo.value;
--+		}
--+	    }
--+	}
--+
--+	return null;
--+    } ;
--+
--+    /**
--+       Returns the localized name information for the provided idp
--+
--+       @param (Object) an idp.  This should have an array 'names' with sub
--+        elements 'lang' and 'name'.
--+
--+       @return (String) The localized name
--+    */
--+    var getLocalizedName = function(idp) {
--+        var res = getLocalizedEntry(idp.DisplayNames);
--+        if (null !== res) {
--+            return res;
--+        }
--+        debug('No Name entry in any language for ' + getEntityId(idp));
--+        return getEntityId(idp);
--+    } ;
--+
--+    var getKeywords = function(idp) {
--+        if (ignoreKeywords || null == idp.Keywords) {
--+            return null;
--+        }
--+        var s = getLocalizedEntry(idp.Keywords);
--+
--+        return s;
--+    }
--+        
--+    var getLocalizedEntry = function(theArray){
--+        var i;
--+
--+        //
--+        // try by full name
--+        //
--+        for (i in theArray) {
--+            if (theArray[i].lang == lang) {
--+                return theArray[i].value;
--+            }
--+        }
--+        //
--+        // then by major language
--+        //
--+        if (typeof majorLang != 'undefined') {
--+            for (i in theArray) {
--+                if (theArray[i].lang == majorLang) {
--+                    return theArray[i].value;
--+                }
--+            }
--+        }
--+        //
--+        // then by null language in metadata
--+        //
--+        for (i in theArray) {
--+            if (theArray[i].lang == null) {
--+                return theArray[i].value;
--+            }
--+        }
--+        
--+        //
--+        // then by default language
--+        //
--+        for (i in theArray) {
--+            if (theArray[i].lang == defaultLang) {
--+                return theArray[i].value;
--+            }
--+        }
--+
--+        return null;
--+    };
--+
--+    
--+    // *************************************
--+    // Private functions
--+    //
--+    // Cookie and preferred IdP Handling
--+    //
--+    // *************************************
--+
--+    /**
--+       Gets the preferred IdPs.  The first elements in the array will
--+       be the preselected preferred IdPs.  The following elements will
--+       be those past IdPs selected by a user.  The size of the array
--+       will be no larger than the maximum number of preferred IdPs.
--+    */
--+    var getPreferredIdPs = function() {
--+        var idps = [];
--+        var offset = 0;
--+        var i;
--+        var j;
--+
--+        //
--+        // populate start of array with preselected IdPs
--+        //
--+        if(null != preferredIdP){
--+            for(i=0; i < preferredIdP.length && i < maxPreferredIdPs-1; i++){
--+                idps[i] = getIdPFor(preferredIdP[i]);
--+                offset++;
--+            }
--+        }
--+        
--+        //
--+        // And then the cookie based ones
--+        //
--+        userSelectedIdPs = retrieveUserSelectedIdPs();
--+        for (i = offset, j=0; i < userSelectedIdPs.length && i < maxPreferredIdPs; i++, j++){
--+            idps.push(getIdPFor(userSelectedIdPs[j]));
--+        }
--+        return idps;
--+    };
--+
--+    /**
--+       Update the userSelectedIdPs list with the new value.
--+
--+       @param (String) the newly selected IdP
--+    */
--+    var updateSelectedIdPs = function(newIdP) {
--+
--+        //
--+        // We cannot use split since it does not appear to
--+        // work as per spec on ie8.
--+        //
--+        var newList = [];
--+
--+        //
--+        // iterate through the list copying everything but the old
--+        // name
--+        //
--+        while (0 !== userSelectedIdPs.length) {
--+            var what = userSelectedIdPs.pop();
--+            if (what != newIdP) {
--+                newList.unshift(what);
--+            }
--+        }
--+
--+        //
--+        // And shove it in at the top
--+        //
--+        newList.unshift(newIdP);
--+        userSelectedIdPs = newList;
--+        return;
--+    };
--+    
--+    /**
--+       Gets the IdP previously selected by the user.
--+      
--+       @return {Array} user selected IdPs identified by their entity ID
--+    */
--+    var retrieveUserSelectedIdPs = function(){
--+        var userSelectedIdPs = [];
--+        var i, j;
--+        var cookies;
--+
--+        cookies = document.cookie.split( ';' );
--+        for (i = 0; i < cookies.length; i++) {
--+            //
--+            // Do not use split('='), '=' is valid in Base64 encoding!
--+            //
--+            var cookie = cookies[i];
--+            var splitPoint = cookie.indexOf( '=' );
--+            var cookieName = cookie.substring(0, splitPoint);
--+            var cookieValues = cookie.substring(splitPoint+1);
--+                                
--+            if ( '_saml_idp' == cookieName.replace(/^\s+|\s+$/g, '') ) {
--+                cookieValues = cookieValues.replace(/^\s+|\s+$/g, '');
--+                cookieValues = cookieValues.replace('+','%20');
--+                cookieValues = cookieValues.split('%20');
--+                for(j=cookieValues.length; j > 0; j--){
--+                    if (0 === cookieValues[j-1].length) {
--+                        continue;
--+                    }
--+                    var dec = base64Decode(decodeURIComponent(cookieValues[j-1]));
--+                    if (dec.length > 0) {
--+                        userSelectedIdPs.push(dec);
--+                    }
--+                }
--+            }
--+        }
--+
--+        return userSelectedIdPs;
--+    };
--+    
--+    /**
--+       Saves the IdPs selected by the user.
--+      
--+       @param {Array} idps idps selected by the user
--+    */
--+    var saveUserSelectedIdPs = function(idps){
--+        var cookieData = [];
--+        var length = idps.length;
--+
--+        if (noWriteCookie) {
--+            return;
--+        }
--+
--+        if (length > 5) {
--+            length = 5;
--+        }
--+        for(var i=length; i > 0; i--){
--+            if (idps[i-1].length > 0) {
--+                cookieData.push(encodeURIComponent(base64Encode(idps[i-1])));
--+            }
--+        }
--+        
--+        var expireDate = null;
--+        if(samlIdPCookieTTL){
--+            var now = new Date();
--+            cookieTTL = samlIdPCookieTTL * 24 * 60 * 60 * 1000;
--+            expireDate = new Date(now.getTime() + cookieTTL);
--+        }
--+        
--+        document.cookie='_saml_idp' + '=' + cookieData.join('%20') + '; path = /' +
--+            ((expireDate===null) ? '' : '; expires=' + expireDate.toUTCString());
--+        
--+    };
--+    
--+    /**
--+       Base64 encodes the given string.
--+      
--+       @param {String} input string to be encoded
--+      
--+       @return {String} base64 encoded string
--+    */
--+    var base64Encode = function(input) {
--+        var output = '', c1, c2, c3, e1, e2, e3, e4;
--+
--+        for ( var i = 0; i < input.length; ) {
--+            c1 = input.charCodeAt(i++);
--+            c2 = input.charCodeAt(i++);
--+            c3 = input.charCodeAt(i++);
--+            e1 = c1 >> 2;
--+            e2 = ((c1 & 3) << 4) + (c2 >> 4);
--+            e3 = ((c2 & 15) << 2) + (c3 >> 6);
--+            e4 = c3 & 63;
--+            if (isNaN(c2)){
--+                e3 = e4 = 64;
--+            } else if (isNaN(c3)){
--+                e4 = 64;
--+            }
--+            output += base64chars.charAt(e1) +
--+                base64chars.charAt(e2) +
--+                base64chars.charAt(e3) + 
--+                base64chars.charAt(e4);
--+        }
--+
--+        return output;
--+    };
--+    
--+    /**
--+       Base64 decodes the given string.
--+      
--+       @param {String} input string to be decoded
--+      
--+       @return {String} base64 decoded string
--+    */
--+    var base64Decode = function(input) {
--+        var output = '', chr1, chr2, chr3, enc1, enc2, enc3, enc4;
--+        var i = 0;
--+
--+        // Remove all characters that are not A-Z, a-z, 0-9, +, /, or =
--+        var base64test = /[^A-Za-z0-9\+\/\=]/g;
--+        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
--+
--+        do {
--+            enc1 = base64chars.indexOf(input.charAt(i++));
--+            enc2 = base64chars.indexOf(input.charAt(i++));
--+            enc3 = base64chars.indexOf(input.charAt(i++));
--+            enc4 = base64chars.indexOf(input.charAt(i++));
--+
--+            chr1 = (enc1 << 2) | (enc2 >> 4);
--+            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
--+            chr3 = ((enc3 & 3) << 6) | enc4;
--+
--+            output = output + String.fromCharCode(chr1);
--+
--+            if (enc3 != 64) {
--+                output = output + String.fromCharCode(chr2);
--+            }
--+            if (enc4 != 64) {
--+                output = output + String.fromCharCode(chr3);
--+            }
--+
--+            chr1 = chr2 = chr3 = '';
--+            enc1 = enc2 = enc3 = enc4 = '';
--+
--+        } while (i < input.length);
--+
--+        return output;
--+    };
--+
--+    // *************************************
--+    // Private functions
--+    //
--+    // Error Handling.  we'll keep it separate with a view to eventual
--+    //                  exbedding into log4js
--+    //
--+    // *************************************
--+    /**
--+       
--+    */
--+
--+    var fatal = function(message) {
--+        alert('FATAL - DISCO UI:' + message);
--+        var txt = document.createTextNode(message); 
--+        idpSelectDiv.appendChild(txt);
--+    };
--+
--+    var debug = function() {
--+        //
--+        // Nothing
--+    };
--+}
--+
--+(new IdPSelectUI()).draw(new IdPSelectUIParms());
--diff --git a/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js b/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
--index 440f661..4500063 100644
----- a/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
--+++ b/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
--@@ -75,4 +75,13 @@ function IdPSelectUIParms(){
--     this.maxWidth = 115;
--     this.maxHeight = 69;
--     this.bestRatio = Math.log(80 / 60);
--+
--+    // Customise using the settings from the DOM
--+    var idpSelect = document.getElementById('idpSelect');
--+    var options = JSON.parse(idpSelect.getAttribute('data-options'));
--+    for (var key in options) {
--+        if (options.hasOwnProperty(key)) {
--+            this[key] = options[key];
--+        }
--+    }
-- }
-diff --git a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
-index 91809fd..eed1533 100644
---- a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
-+++ b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
-@@ -1,11 +1,8 @@
- /* Top level is idpSelectIdPSelector */
- #idpSelectIdPSelector
- {
--    width: 389px;
-+    width: 100%;
-     text-align: left;
--    background-color: #FFFFFF;
--    border: 2px #A40000 solid;
--    padding: 10px;
- }
- 
- /* Next down are the idpSelectPreferredIdPTile, idpSelectIdPEntryTile & idpSelectIdPListTile */
-@@ -16,7 +13,7 @@
-  */
- #idpSelectPreferredIdPTile
- {
--    height:138px; /* Force the height so that the  selector box
-+    min-height:138px; /* Force the height so that the  selector box
-                    * goes below when there is only one preslect 
-                    */
- }
-@@ -123,6 +120,7 @@ div.IdPSelectPreferredIdPButton div.IdPSelectTextDiv
- #idpSelectIdPSelector a:link 
- {
-     text-decoration: none;
-+    border-bottom: 0 none;
- }
- 
- #idpSelectIdPSelector a:visited 
-@@ -203,3 +201,7 @@ div.IdPSelectDropDown div {
-     color: white;
- }
- /* END */
-+
-+#idpSelectIdPEntryTile {
-+    margin-top:15px;
-+}
-diff --git a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.js b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.js
-index dfd2e72..e0aa135 100644
---- a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.js
-+++ b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.js
-@@ -1 +1,2417 @@
--function IdPSelectLanguages(){this.langBundles={en:{"fatal.divMissing":'<div> specified  as "insertAtDiv" could not be located in the HTML',"fatal.noXMLHttpRequest":"Browser does not support XMLHttpRequest, unable to load IdP selection data","fatal.wrongProtocol":'Policy supplied to DS was not "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',"fatal.wrongEntityId":"entityId supplied by SP did not match configuration","fatal.noData":"Metadata download returned no data","fatal.loadFailed":"Failed to download metadata from ","fatal.noparms":"No parameters to discovery session and no defaultReturn parameter configured","fatal.noReturnURL":"No URL return parameter provided","fatal.badProtocol":"Return request must start with https:// or http://","idpPreferred.label":"Use a suggested selection:","idpEntry.label":"Or enter your organization's name","idpEntry.NoPreferred.label":"Enter your organization's name","idpList.label":"Or select your organization from the list below","idpList.NoPreferred.label":"Select your organization from the list below","idpList.defaultOptionLabel":"Please select your organization...","idpList.showList":"Allow me to pick from a list","idpList.showSearch":"Allow me to specify the site","submitButton.label":"Continue",helpText:"Help",defaultLogoAlt:"DefaultLogo"},de:{"fatal.divMissing":"Das notwendige Div Element fehlt","fatal.noXMLHttpRequest":"Ihr Webbrowser unterst\u00fctzt keine XMLHttpRequests, IdP-Auswahl kann nicht geladen werden","fatal.wrongProtocol":'DS bekam eine andere Policy als "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',"fatal.wrongEntityId":"Die entityId ist nicht korrekt","fatal.loadFailed":"Metadaten konnten nicht heruntergeladen werden: ","fatal.noparms":"Parameter f\u00fcr das Discovery Service oder 'defaultReturn' fehlen","fatal.noReturnURL":"URL return Parmeter fehlt","fatal.badProtocol":"return Request muss mit https:// oder http:// beginnen","idpPreferred.label":"Vorherige Auswahl:","idpEntry.label":"Oder geben Sie den Namen (oder Teile davon) an:","idpEntry.NoPreferred.label":"Namen (oder Teile davon) der Institution angeben:","idpList.label":"Oder w\u00e4hlen Sie Ihre Institution aus einer Liste:","idpList.NoPreferred.label":"Institution aus folgender Liste w\u00e4hlen:","idpList.defaultOptionLabel":"W\u00e4hlen Sie Ihre Institution aus...","idpList.showList":"Institution aus einer Liste w\u00e4hlen","idpList.showSearch":"Institution selbst angeben","submitButton.label":"OK",helpText:"Hilfe",defaultLogoAlt:"Standard logo"},ja:{"fatal.divMissing":'"insertAtDiv" の ID を持つ <div> が HTML 中に存在しません',"fatal.noXMLHttpRequest":"ブラウザが XMLHttpRequest をサポートしていないので IdP 情報を取得できません","fatal.wrongProtocol":'DSへ渡された Policy パラメータが "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single" ではありません',"fatal.wrongEntityId":"SP から渡された entityId が設定値と異なります","fatal.noData":"メタデータが空です","fatal.loadFailed":"次の URL からメタデータをダウンロードできませんでした: ","fatal.noparms":"DSにパラメータが渡されておらず defaultReturn も設定されていません","fatal.noReturnURL":"戻り URL が指定されていません","fatal.badProtocol":"戻り URL は https:// か http:// で始まらなければなりません","idpPreferred.label":"選択候補の IdP:","idpEntry.label":"もしくはあなたの所属機関名を入力してください","idpEntry.NoPreferred.label":"あなたの所属機関名を入力してください","idpList.label":"もしくはあなたの所属機関を選択してください","idpList.NoPreferred.label":"あなたの所属機関を一覧から選択してください","idpList.defaultOptionLabel":"所属機関を選択してください...","idpList.showList":"一覧から選択する","idpList.showSearch":"機関名を入力する","submitButton.label":"選択",helpText:"Help",defaultLogoAlt:"DefaultLogo"},"pt-br":{"fatal.divMissing":'A tag <div> com "insertAtDiv" não foi encontrada no arquivo HTML',"fatal.noXMLHttpRequest":'Seu navegador não suporta "XMLHttpRequest", impossível de carregador os dados do IdP selecionado',"fatal.wrongProtocol":'A política "Policy" fornecida para o DS não foi "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',"fatal.wrongEntityId":"entityId oferecido pelo SP não confere com o da configuração","fatal.noData":"O arquivo de metadados não retornou nada;","fatal.loadFailed":"Falhou ao realizar download do metadado de ","fatal.noparms":'Sem parâmetros para sessão de descoberta e sem parâmetro "defaultReturn" configurado',"fatal.noReturnURL":"Não foi definida um endereço (URL) de retorno no parâmetro","fatal.badProtocol":"Retorno do endereço requisitado deve começar com https:// ou http://","idpPreferred.label":"Use estas Instituições sugeridas: ","idpEntry.label":"Ou informe o nome da sua Instituição","idpEntry.NoPreferred.label":"Informe o nome da sua Instituição","idpList.label":"Ou selecione sua Instituição através da lista abaixo","idpList.NoPreferred.label":"Selecione sua Instituição através da lista abaixo","idpList.defaultOptionLabel":"Por favor, selecione sua Instituição: ","idpList.showList":"Permitir que eu escolha um IdP através de uma lista","idpList.showSearch":"Permitir que eu especifique o IdP","submitButton.label":"Continuar ",helpText:"Ajuda",defaultLogoAlt:"Logo padrão"}}}function TypeAheadControl(l,f,j,g,i,b,h,e,a,c,d,k){this.elementList=l;this.textBox=f;this.origin=j;this.submit=g;this.results=0;this.alwaysShow=c;this.maxResults=d;this.ie6hack=a;this.maxchars=i;this.getName=b;this.getEntityId=h;this.geticon=e;this.getKeywords=k}TypeAheadControl.prototype.draw=function(b){var a=this;this.dropDown=document.createElement("ul");this.dropDown.className="IdPSelectDropDown";this.dropDown.style.visibility="hidden";this.dropDown.style.width=this.textBox.offsetWidth;this.dropDown.current=-1;this.textBox.setAttribute("role","listbox");document.body.appendChild(this.dropDown);this.textBox.setAttribute("role","combobox");this.textBox.setAttribute("aria-controls","IdPSelectDropDown");this.textBox.setAttribute("aria-owns","IdPSelectDropDown");this.dropDown.onmouseover=function(c){if(!c){c=window.event}var d;if(c.target){d=c.target}if(typeof d=="undefined"){d=c.srcElement}a.select(d)};this.dropDown.onmousedown=function(c){if(-1!=a.dropDown.current){a.textBox.value=a.results[a.dropDown.current][0]}};this.textBox.onkeyup=function(c){if(!c){c=window.event}a.handleKeyUp(c)};this.textBox.onkeydown=function(c){if(!c){c=window.event}a.handleKeyDown(c)};this.textBox.onblur=function(){a.hideDrop()};this.textBox.onfocus=function(){a.handleChange()};if(null==b||b){this.textBox.focus()}};TypeAheadControl.prototype.getPossible=function(b){var h=[];var j=0;var f=0;var e=0;var g;var i;b=b.toLowerCase();while(f<=this.maxResults&&j<this.elementList.length){var a=false;var c=this.getName(this.elementList[j]);if(c.toLowerCase().indexOf(b)!=-1){a=true}if(!a&&this.getEntityId(this.elementList[j]).toLowerCase().indexOf(b)!=-1){a=true}if(!a){var d=this.getKeywords(this.elementList[j]);if(null!=d&&d.toLowerCase().indexOf(b)!=-1){a=true}}if(a){h[f]=[c,this.getEntityId(this.elementList[j]),this.geticon(this.elementList[j])];f++}j++}this.dropDown.current=-1;return h};TypeAheadControl.prototype.handleKeyUp=function(b){var a=b.keyCode;if(27==a){this.textBox.value="";this.handleChange()}else{if(8==a||32==a||(a>=46&&a<112)||a>123){this.handleChange()}}};TypeAheadControl.prototype.handleKeyDown=function(b){var a=b.keyCode;if(38==a){this.upSelect()}else{if(40==a){this.downSelect()}}};TypeAheadControl.prototype.hideDrop=function(){var a=0;if(null!==this.ie6hack){while(a<this.ie6hack.length){this.ie6hack[a].style.visibility="visible";a++}}this.dropDown.style.visibility="hidden";this.textBox.setAttribute("aria-expanded","false");if(-1==this.dropDown.current){this.doUnselected()}};TypeAheadControl.prototype.showDrop=function(){var a=0;if(null!==this.ie6hack){while(a<this.ie6hack.length){this.ie6hack[a].style.visibility="hidden";a++}}this.dropDown.style.visibility="visible";this.textBox.setAttribute("aria-expanded","true")};TypeAheadControl.prototype.doSelected=function(){this.submit.disabled=false};TypeAheadControl.prototype.doUnselected=function(){this.submit.disabled=true;this.textBox.setAttribute("aria-activedescendant","")};TypeAheadControl.prototype.handleChange=function(){var b=this.textBox.value;var a=this.getPossible(b);if(0===b.length||0===a.length||(!this.alwaysShow&&this.maxResults<a.length)){this.hideDrop();this.doUnselected();this.results=[];this.dropDown.current=-1}else{this.results=a;this.populateDropDown(a);if(1==a.length){this.select(this.dropDown.childNodes[0]);this.doSelected()}else{this.doUnselected()}}};TypeAheadControl.prototype.populateDropDown=function(d){this.dropDown.innerHTML="";var c=0;var a;var b;var f;while(c<d.length){a=document.createElement("li");a.id="IdPSelectOption"+c;f=d[c][0];if(null!==d[c][2]){b=document.createElement("img");b.src=d[c][2];b.width=16;b.height=16;b.alt="";a.appendChild(b);if(f.length>this.maxchars-2){f=f.substring(0,this.maxchars-2)}f=" "+f}else{if(f.length>this.maxchars){f=f.substring(0,this.maxchars)}}a.appendChild(document.createTextNode(f));a.setAttribute("role","option");this.dropDown.appendChild(a);c++}var e=this.getXY();this.dropDown.style.left=e[0]+"px";this.dropDown.style.top=e[1]+"px";this.showDrop()};TypeAheadControl.prototype.getXY=function(){var a=this.textBox;var c=0;var b=a.offsetHeight;while(a.tagName!="BODY"){c+=a.offsetLeft;b+=a.offsetTop;a=a.offsetParent}c+=a.offsetLeft;b+=a.offsetTop;return[c,b]};TypeAheadControl.prototype.select=function(b){var a=0;var c;this.dropDown.current=-1;this.doUnselected();while(a<this.dropDown.childNodes.length){c=this.dropDown.childNodes[a];if(c==b){c.className="IdPSelectCurrent";c.setAttribute("aria-selected","true");this.textBox.setAttribute("aria-activedescendant","IdPSelectOption"+a);this.doSelected();this.dropDown.current=a;this.origin.value=this.results[a][1];this.origin.textValue=this.results[a][0]}else{c.setAttribute("aria-selected","false");c.className=""}a++}this.textBox.focus()};TypeAheadControl.prototype.downSelect=function(){if(this.results.length>0){if(-1==this.dropDown.current){this.dropDown.current=0;this.dropDown.childNodes[0].className="IdPSelectCurrent";this.dropDown.childNodes[0].setAttribute("aria-selected","true");this.textBox.setAttribute("aria-activedescendant","IdPSelectOption"+0);this.doSelected();this.origin.value=this.results[0][1];this.origin.textValue=this.results[0][0]}else{if(this.dropDown.current<(this.results.length-1)){this.dropDown.childNodes[this.dropDown.current].className="";this.dropDown.current++;this.dropDown.childNodes[this.dropDown.current].className="IdPSelectCurrent";this.dropDown.childNodes[this.dropDown.current].setAttribute("aria-selected","true");this.textBox.setAttribute("aria-activedescendant","IdPSelectOption"+this.dropDown.current);this.doSelected();this.origin.value=this.results[this.dropDown.current][1];this.origin.textValue=this.results[this.dropDown.current][0]}}}};TypeAheadControl.prototype.upSelect=function(){if((this.results.length>0)&&(this.dropDown.current>0)){this.dropDown.childNodes[this.dropDown.current].className="";this.dropDown.current--;this.dropDown.childNodes[this.dropDown.current].className="IdPSelectCurrent";this.dropDown.childNodes[this.dropDown.current].setAttribute("aria-selected","true");this.textBox.setAttribute("aria-activedescendant","IdPSelectOption"+this.dropDown.current);this.doSelected();this.origin.value=this.results[this.dropDown.current][1];this.origin.textValue=this.results[this.dropDown.current][0]}};function IdPSelectUI(){var o;var Q="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var aA;var M;var ar;var ae;var T;var d;var A;var l;var v;var i;var am;var f;var q;var U;var z;var Y;var L;var g;var F;var ak;var I;var N;var ac;var an;var ah;var c;var X;var B;var K;var O;var h;var ap;var P;var aC="idpSelect";var aa="IdPSelect";var ai;var y="";var S="";var aq=[];var ax="entityID";this.draw=function(aE){if(!k(aE)){return}aA=document.getElementById(aE.insertAtDiv);if(!aA){J(x("fatal.divMissing"));return}if(!e(aE.dataSource)){return}aB();r(aE.hiddenIdPs);o.sort(function(aG,aF){return av(aG).localeCompare(av(aF))});var aD=V();aA.appendChild(aD);ai.draw(aE.setFocusTextBox)};var k=function(aD){var aO;z=aD.preferredIdP;Y=aD.maxPreferredIdPs;L=aD.helpURL;g=aD.ie6Hack;F=aD.samlIdPCookieTTL;ac=aD.alwaysShow;an=aD.maxResults;ah=aD.ignoreKeywords;if(aD.showListFirst){c=aD.showListFirst}else{c=false}if(aD.noWriteCookie){X=aD.noWriteCookie}else{X=false}if(aD.ignoreURLParams){B=aD.ignoreURLParams}else{B=false}A=aD.defaultLogo;l=aD.defaultLogoWidth;v=aD.defaultLogoHeight;i=aD.minWidth;am=aD.minHeight;f=aD.maxWidth;q=aD.maxHeight;U=aD.bestRatio;I=aD.maxIdPCharsButton;ak=aD.maxIdPCharsDropDown;N=aD.maxIdPCharsAltTxt;var aE;if(typeof navigator=="undefined"){aE=aD.defaultLanguage}else{aE=navigator.language||navigator.userLanguage||aD.defaultLanguage}aE=aE.toLowerCase();if(aE.indexOf("-")>0){ar=aE.substring(0,aE.indexOf("-"))}var aP=new IdPSelectLanguages();ae=aD.defaultLanguage;if(typeof aD.langBundles!="undefined"&&typeof aD.langBundles[aE]!="undefined"){T=aD.langBundles[aE]}else{if(typeof aP.langBundles[aE]!="undefined"){T=aP.langBundles[aE]}else{if(typeof ar!="undefined"){if(typeof aD.langBundles!="undefined"&&typeof aD.langBundles[ar]!="undefined"){T=aD.langBundles[ar]}else{if(typeof aP.langBundles[ar]!="undefined"){T=aP.langBundles[ar]}}}}}if(typeof aD.langBundles!="undefined"&&typeof aD.langBundles[aD.defaultLanguage]!="undefined"){d=aD.langBundles[aD.defaultLanguage]}else{d=aP.langBundles[aD.defaultLanguage]}if(!d){J("No languages work");return false}if(!T){p("No language support for "+aE);T=d}if(aD.testGUI){return true}var aK="urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single";var aG;var aF=false;var aM;var aL;var aI=window;while(null!==aI.parent&&aI!==aI.parent){aI=aI.parent}var aH=aI.location;var aJ=aH.search;if(B||null==aJ||0==aJ.length||aJ.charAt(0)!="?"){if((null==aD.defaultReturn)&&!B){J(x("fatal.noparms"));return false}aO=aD.myEntityID;y=aD.defaultReturn;if(null!=aD.defaultReturnIDParam){ax=aD.defaultReturnIDParam}}else{aJ=aJ.substring(1);aM=aJ.split("&");if(aM.length===0){J(x("fatal.noparms"));return false}for(aG=0;aG<aM.length;aG++){aL=aM[aG].split("=");if(aL.length!=2){continue}if(aL[0]=="entityID"){aO=decodeURIComponent(aL[1])}else{if(aL[0]=="return"){y=decodeURIComponent(aL[1])}else{if(aL[0]=="returnIDParam"){ax=decodeURIComponent(aL[1])}else{if(aL[0]=="policy"){aK=decodeURIComponent(aL[1])}else{if(aL[0]=="isPassive"){aF=(aL[1].toUpperCase()=="TRUE")}}}}}}}if(aK!="urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"){J(x("fatal.wrongProtocol"));return false}if(aD.myEntityID!==null&&aD.myEntityID!=aO){J(x("fatal.wrongEntityId")+'"'+aO+'" != "'+aD.myEntityID+'"');return false}if(null===y||y.length===0){J(x("fatal.noReturnURL"));return false}if(!af(y)){J(x("fatal.badProtocol"));return false}if(aF){var aQ=b();if(aQ.length==0){location.href=y;return false}else{var aN=ax+"="+encodeURIComponent(aQ[0]);if(y.indexOf("?")==-1){aN="?"+aN}else{aN="&"+aN}location.href=y+aN;return false}}aG=y.indexOf("?");if(aG<0){S=y;return true}S=y.substring(0,aG);aJ=y.substring(aG+1);aM=aJ.split("&");for(aG=0;aG<aM.length;aG++){aL=aM[aG].split("=");if(aL.length!=2){continue}aL[1]=decodeURIComponent(aL[1]);aq.push(aL)}return true};var aB=function(){var aF=[];var aE;for(aE=0;aE<o.length;){var aD=w(o[aE]);if(null==aF[aD]){aF[aD]=aD;aE=aE+1}else{o.splice(aE,1)}}};var r=function(aF){if(null==aF||0==aF.length){return}var aE;var aD;for(aE=0;aE<aF.length;aE++){for(aD=0;aD<o.length;aD++){if(w(o[aD])==aF[aE]){o.splice(aD,1);break}}}};var af=function(aE){if(null===aE){return false}var aD="://";var aF=aE.indexOf(aD);if(aF<0){return false}aE=aE.substring(0,aF);if(aE=="http"||aE=="https"){return true}return false};var az=function(){if(null==navigator){return false}var aD=navigator.appName;if(null==aD){return false}return(aD=="Microsoft Internet Explorer")};var e=function(aG){var aF=null;try{aF=new XMLHttpRequest()}catch(aE){}if(null==aF){try{aF=new ActiveXObject("Microsoft.XMLHTTP")}catch(aE){}}if(null==aF){try{aF=new ActiveXObject("MSXML2.XMLHTTP.3.0")}catch(aE){}}if(null==aF){J(x("fatal.noXMLHttpRequest"));return false}if(az()){aG+="?random="+(Math.random()*1000000)}aF.open("GET",aG,false);if(typeof aF.overrideMimeType=="function"){aF.overrideMimeType("application/json")}aF.send(null);if(aF.status==200){var aD=aF.responseText;if(aD===null){J(x("fatal.noData"));return false}o=JSON.parse(aD)}else{J(x("fatal.loadFailed")+aG);return false}return true};var W=function(aD){for(var aE=0;aE<o.length;aE++){if(w(o[aE])==aD){return o[aE]}}return null};var C=function(aK,aE){var aJ=function(aN){var aL=null;var aM;if(null==aK.Logos){return null}for(aM in aK.Logos){if(aK.Logos[aM].lang==aN&&aK.Logos[aM].width!=null&&aK.Logos[aM].width>=i&&aK.Logos[aM].height!=null&&aK.Logos[aM].height>=am){if(aL===null){aL=aK.Logos[aM]}else{me=Math.abs(U-Math.log(aK.Logos[aM].width/aK.Logos[aM].height));him=Math.abs(U-Math.log(aL.width/aL.height));if(him>me){aL=aK.Logos[aM]}}}}return aL};var aG=null;var aF=document.createElement("img");ad(aF,"IdPImg");aG=aJ(M);if(null===aG&&typeof ar!="undefined"){aG=aJ(ar)}if(null===aG){aG=aJ(null)}if(null===aG){aG=aJ(ae)}if(null===aG){if(!aE){return null}aF.src=A;aF.width=l;aF.height=v;aF.alt=x("defaultLogoAlt");return aF}aF.src=aG.value;var aH=av(aK);if(aH.length>N){aH=aH.substring(0,N)+"..."}aF.alt=aH;var aD=aG.width;var aI=aG.height;if(aD>f){aI=(f/aD)*aI;aD=f}if(aI>q){aD=(q/aI)*aD;aD=q}aF.setAttribute("width",aD);aF.setAttribute("height",aI);return aF};var V=function(){var aE=ag("IdPSelector");var aD;aD=at(aE);m(aE,aD);R(aE,aD);return aE};var H=function(aF,aM,aE){var aD=ag(undefined,"PreferredIdPButton");var aL=document.createElement("a");var aK=ax+"="+encodeURIComponent(w(aF));var aG=y;var aI=C(aF,aE);if(aG.indexOf("?")==-1){aK="?"+aK}else{aK="&"+aK}aL.href=aG+aK;aL.onclick=function(){ay(w(aF))};if(null!=aI){var aN=ag(undefined,"PreferredIdPImg");aN.appendChild(aI);aL.appendChild(aN)}var aJ=ag(undefined,"TextDiv");var aH=av(aF);if(aH.length>I){aH=aH.substring(0,I)+"..."}aD.title=aH;aJ.appendChild(document.createTextNode(aH));aL.appendChild(aJ);aD.appendChild(aL);return aD};var aw=function(aD,aG){var aF=ag(undefined,"TextDiv");var aE=document.createTextNode(x(aG));aF.appendChild(aE);aD.appendChild(aF)};var a=function(aD,aF){if(null===aF||0===aF.length||"-"==aF.value){return}var aE=0;while(aE<aD.options.length){if(aD.options[aE].value==aF){aD.options[aE].selected=true;break}aE++}};var at=function(aI){var aH=G();if(0===aH.length){return false}var aD=false;for(var aF=0;aF<Y&&aF<aH.length;aF++){if(aH[aF]&&C(aH[aF],false)){aD=true}}var aG;if(aD){aG=ag("PreferredIdPTile")}else{aG=ag("PreferredIdPTileNoImg")}aw(aG,"idpPreferred.label");for(var aF=0;aF<Y&&aF<aH.length;aF++){if(aH[aF]){var aE=H(aH[aF],aF,aD);aG.appendChild(aE)}}aI.appendChild(aG);return true};var Z=function(){var aE=document.createElement("form");O.appendChild(aE);aE.action=S;aE.method="GET";aE.setAttribute("autocomplete","OFF");var aD=0;for(aD=0;aD<aq.length;aD++){var aF=document.createElement("input");aF.setAttribute("type","hidden");aF.name=aq[aD][0];aF.value=aq[aD][1];aE.appendChild(aF)}return aE};var m=function(aK,aE){O=ag("IdPEntryTile");if(c){O.style.display="none"}var aF=document.createElement("label");aF.setAttribute("for",aC+"Input");if(aE){aw(aF,"idpEntry.label")}else{aw(aF,"idpEntry.NoPreferred.label")}var aI=Z();aI.appendChild(aF);var aH=document.createElement("input");aI.appendChild(aH);aH.type="text";j(aH,"Input");var aJ=document.createElement("input");aJ.setAttribute("type","hidden");aI.appendChild(aJ);aJ.name=ax;aJ.value="-";var aG=s("Select");aG.disabled=true;aI.appendChild(aG);aI.onsubmit=function(){if(null===aJ.value||0===aJ.value.length||"-"==aJ.value){return false}aH.value=aJ.textValue;ay(aJ.value);return true};ai=new TypeAheadControl(o,aH,aJ,aG,ak,av,w,ab,g,ac,an,D);var aD=document.createElement("a");aD.appendChild(document.createTextNode(x("idpList.showList")));aD.href="#";ad(aD,"DropDownToggle");aD.onclick=function(){O.style.display="none";a(ap,aJ.value);h.style.display="inline";P.focus();return false};O.appendChild(aD);u(O);aK.appendChild(O)};var R=function(aD,aG){h=ag("IdPListTile");if(!c){h.style.display="none"}var aK=document.createElement("label");aK.setAttribute("for",aC+"Selector");if(aG){aw(aK,"idpList.label")}else{aw(aK,"idpList.NoPreferred.label")}ap=document.createElement("select");j(ap,"Selector");ap.name=ax;h.appendChild(ap);var aL=n("-",x("idpList.defaultOptionLabel"));aL.selected=true;ap.appendChild(aL);var aF;for(var aH=0;aH<o.length;aH++){aF=o[aH];aL=n(w(aF),av(aF));ap.appendChild(aL)}var aE=Z();aE.appendChild(aK);aE.appendChild(ap);aE.onsubmit=function(){if(ap.selectedIndex<1){return false}ay(ap.options[ap.selectedIndex].value);return true};var aI=s("List");P=aI;aE.appendChild(aI);h.appendChild(aE);var aJ=document.createElement("a");aJ.appendChild(document.createTextNode(x("idpList.showSearch")));aJ.href="#";ad(aJ,"DropDownToggle");aJ.onclick=function(){O.style.display="inline";h.style.display="none";return false};h.appendChild(aJ);u(h);aD.appendChild(h)};var s=function(aE){var aD=document.createElement("input");aD.setAttribute("type","submit");aD.value=x("submitButton.label");j(aD,aE+"Button");return aD};var u=function(aE){var aD=document.createElement("a");aD.href=L;aD.appendChild(document.createTextNode(x("helpText")));ad(aD,"HelpButton");aE.appendChild(aD)};var ag=function(aF,aD){var aE=document.createElement("div");if(undefined!==aF){j(aE,aF)}if(undefined!==aD){ad(aE,aD)}return aE};var n=function(aE,aF){var aD=document.createElement("option");aD.value=aE;if(aF.length>ak){aF=aF.substring(0,ak)}aD.appendChild(document.createTextNode(aF));return aD};var j=function(aE,aD){aE.id=aC+aD};var ad=function(aE,aD){aE.setAttribute("class",aa+aD)};var au=function(aD){return document.getElementById(aC+aD)};var ay=function(aD){E(aD);aj(K)};var x=function(aD){var aE=T[aD];if(!aE){aE=d[aD]}if(!aE){aE="Missing message for "+aD}return aE};var w=function(aD){return aD.entityID};var ab=function(aF){var aD;if(null==aF.Logos){return null}for(aD=0;aD<aF.Logos.length;aD++){var aE=aF.Logos[aD];if(aE.height=="16"&&aE.width=="16"){if(null==aE.lang||M==aE.lang||(typeof ar!="undefined"&&ar==aE.lang)||ae==aE.lang){return aE.value}}}return null};var av=function(aE){var aD=ao(aE.DisplayNames);if(null!==aD){return aD}p("No Name entry in any language for "+w(aE));return w(aE)};var D=function(aE){if(ah||null==aE.Keywords){return null}var aD=ao(aE.Keywords);return aD};var ao=function(aD){var aE;for(aE in aD){if(aD[aE].lang==M){return aD[aE].value}}if(typeof ar!="undefined"){for(aE in aD){if(aD[aE].lang==ar){return aD[aE].value}}}for(aE in aD){if(aD[aE].lang==null){return aD[aE].value}}for(aE in aD){if(aD[aE].lang==ae){return aD[aE].value}}return null};var G=function(){var aG=[];var aF=0;var aE;var aD;if(null!=z){for(aE=0;aE<z.length&&aE<Y-1;aE++){aG[aE]=W(z[aE]);aF++}}K=b();for(aE=aF,aD=0;aE<K.length&&aE<Y;aE++,aD++){aG.push(W(K[aD]))}return aG};var E=function(aD){var aE=[];while(0!==K.length){var aF=K.pop();if(aF!=aD){aE.unshift(aF)}}aE.unshift(aD);K=aE;return};var b=function(){var aJ=[];var aI,aG;var aL;aL=document.cookie.split(";");for(aI=0;aI<aL.length;aI++){var aD=aL[aI];var aH=aD.indexOf("=");var aK=aD.substring(0,aH);var aF=aD.substring(aH+1);if("_saml_idp"==aK.replace(/^\s+|\s+$/g,"")){aF=aF.replace(/^\s+|\s+$/g,"");aF=aF.replace("+","%20");aF=aF.split("%20");for(aG=aF.length;aG>0;aG--){if(0===aF[aG-1].length){continue}var aE=al(decodeURIComponent(aF[aG-1]));if(aE.length>0){aJ.push(aE)}}}}return aJ};var aj=function(aI){var aF=[];var aH=aI.length;if(X){return}if(aH>5){aH=5}for(var aG=aH;aG>0;aG--){if(aI[aG-1].length>0){aF.push(encodeURIComponent(t(aI[aG-1])))}}var aD=null;if(F){var aE=new Date();cookieTTL=F*24*60*60*1000;aD=new Date(aE.getTime()+cookieTTL)}document.cookie="_saml_idp="+aF.join("%20")+"; path = /"+((aD===null)?"":"; expires="+aD.toUTCString())};var t=function(aM){var aD="",aH,aF,aE,aL,aK,aJ,aI;for(var aG=0;aG<aM.length;){aH=aM.charCodeAt(aG++);aF=aM.charCodeAt(aG++);aE=aM.charCodeAt(aG++);aL=aH>>2;aK=((aH&3)<<4)+(aF>>4);aJ=((aF&15)<<2)+(aE>>6);aI=aE&63;if(isNaN(aF)){aJ=aI=64}else{if(isNaN(aE)){aI=64}}aD+=Q.charAt(aL)+Q.charAt(aK)+Q.charAt(aJ)+Q.charAt(aI)}return aD};var al=function(aG){var aE="",aN,aL,aJ,aM,aK,aI,aH;var aF=0;var aD=/[^A-Za-z0-9\+\/\=]/g;aG=aG.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{aM=Q.indexOf(aG.charAt(aF++));aK=Q.indexOf(aG.charAt(aF++));aI=Q.indexOf(aG.charAt(aF++));aH=Q.indexOf(aG.charAt(aF++));aN=(aM<<2)|(aK>>4);aL=((aK&15)<<4)|(aI>>2);aJ=((aI&3)<<6)|aH;aE=aE+String.fromCharCode(aN);if(aI!=64){aE=aE+String.fromCharCode(aL)}if(aH!=64){aE=aE+String.fromCharCode(aJ)}aN=aL=aJ="";aM=aK=aI=aH=""}while(aF<aG.length);return aE};var J=function(aE){alert("FATAL - DISCO UI:"+aE);var aD=document.createTextNode(aE);aA.appendChild(aD)};var p=function(){}}(new IdPSelectUI()).draw(new IdPSelectUIParms());
-\ No newline at end of file
-+/*
-+    http://www.JSON.org/json2.js
-+    2011-02-23
-+
-+    Public Domain.
-+
-+    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
-+
-+    See http://www.JSON.org/js.html
-+
-+
-+    This code should be minified before deployment.
-+    See http://javascript.crockford.com/jsmin.html
-+
-+    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
-+    NOT CONTROL.
-+
-+
-+    This file creates a global JSON object containing two methods: stringify
-+    and parse.
-+
-+        JSON.stringify(value, replacer, space)
-+            value       any JavaScript value, usually an object or array.
-+
-+            replacer    an optional parameter that determines how object
-+                        values are stringified for objects. It can be a
-+                        function or an array of strings.
-+
-+            space       an optional parameter that specifies the indentation
-+                        of nested structures. If it is omitted, the text will
-+                        be packed without extra whitespace. If it is a number,
-+                        it will specify the number of spaces to indent at each
-+                        level. If it is a string (such as '\t' or '&nbsp;'),
-+                        it contains the characters used to indent at each level.
-+
-+            This method produces a JSON text from a JavaScript value.
-+
-+            When an object value is found, if the object contains a toJSON
-+            method, its toJSON method will be called and the result will be
-+            stringified. A toJSON method does not serialize: it returns the
-+            value represented by the name/value pair that should be serialized,
-+            or undefined if nothing should be serialized. The toJSON method
-+            will be passed the key associated with the value, and this will be
-+            bound to the value
-+
-+            For example, this would serialize Dates as ISO strings.
-+
-+                Date.prototype.toJSON = function (key) {
-+                    function f(n) {
-+                        // Format integers to have at least two digits.
-+                        return n < 10 ? '0' + n : n;
-+                    }
-+
-+                    return this.getUTCFullYear()   + '-' +
-+                         f(this.getUTCMonth() + 1) + '-' +
-+                         f(this.getUTCDate())      + 'T' +
-+                         f(this.getUTCHours())     + ':' +
-+                         f(this.getUTCMinutes())   + ':' +
-+                         f(this.getUTCSeconds())   + 'Z';
-+                };
-+
-+            You can provide an optional replacer method. It will be passed the
-+            key and value of each member, with this bound to the containing
-+            object. The value that is returned from your method will be
-+            serialized. If your method returns undefined, then the member will
-+            be excluded from the serialization.
-+
-+            If the replacer parameter is an array of strings, then it will be
-+            used to select the members to be serialized. It filters the results
-+            such that only members with keys listed in the replacer array are
-+            stringified.
-+
-+            Values that do not have JSON representations, such as undefined or
-+            functions, will not be serialized. Such values in objects will be
-+            dropped; in arrays they will be replaced with null. You can use
-+            a replacer function to replace those with JSON values.
-+            JSON.stringify(undefined) returns undefined.
-+
-+            The optional space parameter produces a stringification of the
-+            value that is filled with line breaks and indentation to make it
-+            easier to read.
-+
-+            If the space parameter is a non-empty string, then that string will
-+            be used for indentation. If the space parameter is a number, then
-+            the indentation will be that many spaces.
-+
-+            Example:
-+
-+            text = JSON.stringify(['e', {pluribus: 'unum'}]);
-+            // text is '["e",{"pluribus":"unum"}]'
-+
-+
-+            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
-+            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'
-+
-+            text = JSON.stringify([new Date()], function (key, value) {
-+                return this[key] instanceof Date ?
-+                    'Date(' + this[key] + ')' : value;
-+            });
-+            // text is '["Date(---current time---)"]'
-+
-+
-+        JSON.parse(text, reviver)
-+            This method parses a JSON text to produce an object or array.
-+            It can throw a SyntaxError exception.
-+
-+            The optional reviver parameter is a function that can filter and
-+            transform the results. It receives each of the keys and values,
-+            and its return value is used instead of the original value.
-+            If it returns what it received, then the structure is not modified.
-+            If it returns undefined then the member is deleted.
-+
-+            Example:
-+
-+            // Parse the text. Values that look like ISO date strings will
-+            // be converted to Date objects.
-+
-+            myData = JSON.parse(text, function (key, value) {
-+                var a;
-+                if (typeof value === 'string') {
-+                    a =
-+/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
-+                    if (a) {
-+                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
-+                            +a[5], +a[6]));
-+                    }
-+                }
-+                return value;
-+            });
-+
-+            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
-+                var d;
-+                if (typeof value === 'string' &&
-+                        value.slice(0, 5) === 'Date(' &&
-+                        value.slice(-1) === ')') {
-+                    d = new Date(value.slice(5, -1));
-+                    if (d) {
-+                        return d;
-+                    }
-+                }
-+                return value;
-+            });
-+
-+
-+    This is a reference implementation. You are free to copy, modify, or
-+    redistribute.
-+*/
-+
-+/*jslint evil: true, strict: false, regexp: false */
-+
-+/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
-+    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
-+    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
-+    lastIndex, length, parse, prototype, push, replace, slice, stringify,
-+    test, toJSON, toString, valueOf
-+*/
-+
-+
-+// Create a JSON object only if one does not already exist. We create the
-+// methods in a closure to avoid creating global variables.
-+
-+var JSON;
-+if (!JSON) {
-+    JSON = {};
-+}
-+
-+(function () {
-+    "use strict";
-+
-+    function f(n) {
-+        // Format integers to have at least two digits.
-+        return n < 10 ? '0' + n : n;
-+    }
-+
-+    if (typeof Date.prototype.toJSON !== 'function') {
-+
-+        Date.prototype.toJSON = function (key) {
-+
-+            return isFinite(this.valueOf()) ?
-+                this.getUTCFullYear()     + '-' +
-+                f(this.getUTCMonth() + 1) + '-' +
-+                f(this.getUTCDate())      + 'T' +
-+                f(this.getUTCHours())     + ':' +
-+                f(this.getUTCMinutes())   + ':' +
-+                f(this.getUTCSeconds())   + 'Z' : null;
-+        };
-+
-+        String.prototype.toJSON      =
-+            Number.prototype.toJSON  =
-+            Boolean.prototype.toJSON = function (key) {
-+                return this.valueOf();
-+            };
-+    }
-+
-+    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
-+        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
-+        gap,
-+        indent,
-+        meta = {    // table of character substitutions
-+            '\b': '\\b',
-+            '\t': '\\t',
-+            '\n': '\\n',
-+            '\f': '\\f',
-+            '\r': '\\r',
-+            '"' : '\\"',
-+            '\\': '\\\\'
-+        },
-+        rep;
-+
-+
-+    function quote(string) {
-+
-+// If the string contains no control characters, no quote characters, and no
-+// backslash characters, then we can safely slap some quotes around it.
-+// Otherwise we must also replace the offending characters with safe escape
-+// sequences.
-+
-+        escapable.lastIndex = 0;
-+        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
-+            var c = meta[a];
-+            return typeof c === 'string' ? c :
-+                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
-+        }) + '"' : '"' + string + '"';
-+    }
-+
-+
-+    function str(key, holder) {
-+
-+// Produce a string from holder[key].
-+
-+        var i,          // The loop counter.
-+            k,          // The member key.
-+            v,          // The member value.
-+            length,
-+            mind = gap,
-+            partial,
-+            value = holder[key];
-+
-+// If the value has a toJSON method, call it to obtain a replacement value.
-+
-+        if (value && typeof value === 'object' &&
-+                typeof value.toJSON === 'function') {
-+            value = value.toJSON(key);
-+        }
-+
-+// If we were called with a replacer function, then call the replacer to
-+// obtain a replacement value.
-+
-+        if (typeof rep === 'function') {
-+            value = rep.call(holder, key, value);
-+        }
-+
-+// What happens next depends on the value's type.
-+
-+        switch (typeof value) {
-+        case 'string':
-+            return quote(value);
-+
-+        case 'number':
-+
-+// JSON numbers must be finite. Encode non-finite numbers as null.
-+
-+            return isFinite(value) ? String(value) : 'null';
-+
-+        case 'boolean':
-+        case 'null':
-+
-+// If the value is a boolean or null, convert it to a string. Note:
-+// typeof null does not produce 'null'. The case is included here in
-+// the remote chance that this gets fixed someday.
-+
-+            return String(value);
-+
-+// If the type is 'object', we might be dealing with an object or an array or
-+// null.
-+
-+        case 'object':
-+
-+// Due to a specification blunder in ECMAScript, typeof null is 'object',
-+// so watch out for that case.
-+
-+            if (!value) {
-+                return 'null';
-+            }
-+
-+// Make an array to hold the partial results of stringifying this object value.
-+
-+            gap += indent;
-+            partial = [];
-+
-+// Is the value an array?
-+
-+            if (Object.prototype.toString.apply(value) === '[object Array]') {
-+
-+// The value is an array. Stringify every element. Use null as a placeholder
-+// for non-JSON values.
-+
-+                length = value.length;
-+                for (i = 0; i < length; i += 1) {
-+                    partial[i] = str(i, value) || 'null';
-+                }
-+
-+// Join all of the elements together, separated with commas, and wrap them in
-+// brackets.
-+
-+                v = partial.length === 0 ? '[]' : gap ?
-+                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
-+                    '[' + partial.join(',') + ']';
-+                gap = mind;
-+                return v;
-+            }
-+
-+// If the replacer is an array, use it to select the members to be stringified.
-+
-+            if (rep && typeof rep === 'object') {
-+                length = rep.length;
-+                for (i = 0; i < length; i += 1) {
-+                    if (typeof rep[i] === 'string') {
-+                        k = rep[i];
-+                        v = str(k, value);
-+                        if (v) {
-+                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
-+                        }
-+                    }
-+                }
-+            } else {
-+
-+// Otherwise, iterate through all of the keys in the object.
-+
-+                for (k in value) {
-+                    if (Object.prototype.hasOwnProperty.call(value, k)) {
-+                        v = str(k, value);
-+                        if (v) {
-+                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
-+                        }
-+                    }
-+                }
-+            }
-+
-+// Join all of the member texts together, separated with commas,
-+// and wrap them in braces.
-+
-+            v = partial.length === 0 ? '{}' : gap ?
-+                '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
-+                '{' + partial.join(',') + '}';
-+            gap = mind;
-+            return v;
-+        }
-+    }
-+
-+// If the JSON object does not yet have a stringify method, give it one.
-+
-+    if (typeof JSON.stringify !== 'function') {
-+        JSON.stringify = function (value, replacer, space) {
-+
-+// The stringify method takes a value and an optional replacer, and an optional
-+// space parameter, and returns a JSON text. The replacer can be a function
-+// that can replace values, or an array of strings that will select the keys.
-+// A default replacer method can be provided. Use of the space parameter can
-+// produce text that is more easily readable.
-+
-+            var i;
-+            gap = '';
-+            indent = '';
-+
-+// If the space parameter is a number, make an indent string containing that
-+// many spaces.
-+
-+            if (typeof space === 'number') {
-+                for (i = 0; i < space; i += 1) {
-+                    indent += ' ';
-+                }
-+
-+// If the space parameter is a string, it will be used as the indent string.
-+
-+            } else if (typeof space === 'string') {
-+                indent = space;
-+            }
-+
-+// If there is a replacer, it must be a function or an array.
-+// Otherwise, throw an error.
-+
-+            rep = replacer;
-+            if (replacer && typeof replacer !== 'function' &&
-+                    (typeof replacer !== 'object' ||
-+                    typeof replacer.length !== 'number')) {
-+                throw new Error('JSON.stringify');
-+            }
-+
-+// Make a fake root object containing our value under the key of ''.
-+// Return the result of stringifying the value.
-+
-+            return str('', {'': value});
-+        };
-+    }
-+
-+
-+// If the JSON object does not yet have a parse method, give it one.
-+
-+    if (typeof JSON.parse !== 'function') {
-+        JSON.parse = function (text, reviver) {
-+
-+// The parse method takes a text and an optional reviver function, and returns
-+// a JavaScript value if the text is a valid JSON text.
-+
-+            var j;
-+
-+            function walk(holder, key) {
-+
-+// The walk method is used to recursively walk the resulting structure so
-+// that modifications can be made.
-+
-+                var k, v, value = holder[key];
-+                if (value && typeof value === 'object') {
-+                    for (k in value) {
-+                        if (Object.prototype.hasOwnProperty.call(value, k)) {
-+                            v = walk(value, k);
-+                            if (v !== undefined) {
-+                                value[k] = v;
-+                            } else {
-+                                delete value[k];
-+                            }
-+                        }
-+                    }
-+                }
-+                return reviver.call(holder, key, value);
-+            }
-+
-+
-+// Parsing happens in four stages. In the first stage, we replace certain
-+// Unicode characters with escape sequences. JavaScript handles many characters
-+// incorrectly, either silently deleting them, or treating them as line endings.
-+
-+            text = String(text);
-+            cx.lastIndex = 0;
-+            if (cx.test(text)) {
-+                text = text.replace(cx, function (a) {
-+                    return '\\u' +
-+                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
-+                });
-+            }
-+
-+// In the second stage, we run the text against regular expressions that look
-+// for non-JSON patterns. We are especially concerned with '()' and 'new'
-+// because they can cause invocation, and '=' because it can cause mutation.
-+// But just to be safe, we want to reject all unexpected forms.
-+
-+// We split the second stage into 4 regexp operations in order to work around
-+// crippling inefficiencies in IE's and Safari's regexp engines. First we
-+// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
-+// replace all simple value tokens with ']' characters. Third, we delete all
-+// open brackets that follow a colon or comma or that begin the text. Finally,
-+// we look to see that the remaining characters are only whitespace or ']' or
-+// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.
-+
-+            if (/^[\],:{}\s]*$/
-+                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
-+                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
-+                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
-+
-+// In the third stage we use the eval function to compile the text into a
-+// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
-+// in JavaScript: it can begin a block or an object literal. We wrap the text
-+// in parens to eliminate the ambiguity.
-+
-+                j = eval('(' + text + ')');
-+
-+// In the optional fourth stage, we recursively walk the new structure, passing
-+// each name/value pair to a reviver function for possible transformation.
-+
-+                return typeof reviver === 'function' ?
-+                    walk({'': j}, '') : j;
-+            }
-+
-+// If the text is not JSON parseable, then a SyntaxError is thrown.
-+
-+            throw new SyntaxError('JSON.parse');
-+        };
-+    }
-+}());
-+
-+function TypeAheadControl(jsonObj, box, orig, submit, maxchars, getName, getEntityId, geticon, ie6hack, alwaysShow, maxResults, getKeywords)
-+{
-+    //
-+    // Squirrel away the parameters we were given
-+    //
-+    this.elementList = jsonObj;
-+    this.textBox = box;
-+    this.origin = orig;
-+    this.submit = submit;
-+    this.results = 0;
-+    this.alwaysShow = alwaysShow;
-+    this.maxResults = maxResults;
-+    this.ie6hack = ie6hack;
-+    this.maxchars = maxchars;
-+    this.getName = getName;
-+    this.getEntityId = getEntityId;
-+    this.geticon = geticon;
-+    this.getKeywords = getKeywords;
-+}
-+
-+TypeAheadControl.prototype.draw = function(setFocus) {
-+
-+    //
-+    // Make a closure on this so that the embedded functions
-+    // get access to it.
-+    //
-+    var myThis = this;
-+   
-+
-+    //
-+    // Set up the 'dropDown'
-+    //
-+    this.dropDown = document.createElement('ul');
-+    this.dropDown.className = 'IdPSelectDropDown';
-+    this.dropDown.style.visibility = 'hidden';
-+
-+    this.dropDown.style.width = this.textBox.offsetWidth;
-+    this.dropDown.current = -1;
-+    this.textBox.setAttribute('role', 'listbox');
-+    document.body.appendChild(this.dropDown);
-+
-+    //
-+    // Set ARIA on the input
-+    //
-+    this.textBox.setAttribute('role', 'combobox');
-+    this.textBox.setAttribute('aria-controls', 'IdPSelectDropDown');
-+    this.textBox.setAttribute('aria-owns', 'IdPSelectDropDown');
-+
-+    //
-+    // mouse listeners for the dropdown box
-+    //
-+    this.dropDown.onmouseover = function(event) {
-+        if (!event) {
-+            event = window.event;
-+        }
-+        var target;
-+        if (event.target){
-+            target = event.target;
-+        }
-+        if (typeof target == 'undefined') {
-+            target = event.srcElement;
-+        }
-+        myThis.select(target);
-+    };
-+   
-+    this.dropDown.onmousedown = function(event) {
-+        if (-1 != myThis.dropDown.current) {
-+            myThis.textBox.value = myThis.results[myThis.dropDown.current][0];
-+        }
-+    };
-+
-+    //
-+    // Add the listeners to the text box
-+    //
-+    this.textBox.onkeyup = function(event) {
-+        //
-+        // get window event if needed (because of browser oddities)
-+        //
-+        if (!event) {
-+            event = window.event;
-+        }
-+        myThis.handleKeyUp(event);
-+    };
-+
-+    this.textBox.onkeydown = function(event) {
-+        if (!event) {
-+            event = window.event;
-+        }
-+
-+        myThis.handleKeyDown(event);
-+    };
-+
-+    this.textBox.onblur = function() {
-+        myThis.hideDrop();
-+    };
-+
-+    this.textBox.onfocus = function() {
-+        myThis.handleChange();
-+    };
-+
-+    if (null == setFocus || setFocus) {
-+        this.textBox.focus();
-+    }
-+};
-+
-+//
-+// Given a name return the first maxresults, or all possibles
-+//
-+TypeAheadControl.prototype.getPossible = function(name) {
-+    var possibles = [];
-+    var inIndex = 0;
-+    var outIndex = 0;
-+    var strIndex = 0;
-+    var str;
-+    var ostr;
-+
-+    name = name.toLowerCase();
-+        
-+    while (outIndex <= this.maxResults && inIndex < this.elementList.length) {
-+        var hit = false;
-+        var thisName = this.getName(this.elementList[inIndex]);
-+
-+        //
-+        // Check name
-+        //
-+        if (thisName.toLowerCase().indexOf(name) != -1) {
-+            hit = true;
-+        }  
-+        //
-+        // Check entityID
-+        //
-+        if (!hit && this.getEntityId(this.elementList[inIndex]).toLowerCase().indexOf(name) != -1) {
-+            hit = true;
-+        }
-+
-+        if (!hit) {
-+            var thisKeywords = this.getKeywords(this.elementList[inIndex]);
-+            if (null != thisKeywords && 
-+                thisKeywords.toLowerCase().indexOf(name) != -1) {
-+                hit = true;
-+            }
-+        }  
-+                
-+        if (hit) {
-+            possibles[outIndex] = [thisName, this.getEntityId(this.elementList[inIndex]), this.geticon(this.elementList[inIndex])];
-+            outIndex ++;
-+        }
-+                
-+        inIndex ++;
-+    }
-+    //
-+    // reset the cursor to the top
-+    //
-+    this.dropDown.current = -1;
-+    
-+    return possibles;
-+};
-+
-+TypeAheadControl.prototype.handleKeyUp = function(event) {
-+    var key = event.keyCode;
-+
-+    if (27 == key) {
-+        //
-+        // Escape - clear
-+        //
-+        this.textBox.value = '';
-+        this.handleChange();
-+    } else if (8 == key || 32 == key || (key >= 46 && key < 112) || key > 123) {
-+        //
-+        // Backspace, Space and >=Del to <F1 and > F12
-+        //
-+        this.handleChange();
-+    }
-+};
-+ 
-+TypeAheadControl.prototype.handleKeyDown = function(event) {
-+
-+    var key = event.keyCode;
-+
-+    if (38 == key) {
-+        //
-+        // up arrow
-+        //
-+        this.upSelect();
-+
-+    } else if (40 == key) {
-+        //
-+        // down arrow
-+        //
-+        this.downSelect();
-+    }
-+};
-+
-+TypeAheadControl.prototype.hideDrop = function() {
-+    var i = 0;
-+    if (null !== this.ie6hack) {
-+        while (i < this.ie6hack.length) {
-+            this.ie6hack[i].style.visibility = 'visible';
-+            i++;
-+        }
-+    }
-+    this.dropDown.style.visibility = 'hidden';
-+    this.textBox.setAttribute('aria-expanded', 'false');
-+
-+
-+    if (-1 == this.dropDown.current) {
-+        this.doUnselected();
-+    }
-+};
-+
-+TypeAheadControl.prototype.showDrop = function() {
-+    var i = 0;
-+    if (null !== this.ie6hack) {
-+        while (i < this.ie6hack.length) {
-+            this.ie6hack[i].style.visibility = 'hidden';
-+            i++;
-+        }
-+    }
-+    this.dropDown.style.visibility = 'visible';
-+    this.textBox.setAttribute('aria-expanded', 'true');
-+};
-+
-+
-+TypeAheadControl.prototype.doSelected = function() {
-+    this.submit.disabled = false;
-+};
-+
-+TypeAheadControl.prototype.doUnselected = function() {
-+    this.submit.disabled = true;
-+    this.textBox.setAttribute('aria-activedescendant', '');
-+};
-+
-+TypeAheadControl.prototype.handleChange = function() {
-+
-+    var val = this.textBox.value;
-+    var res = this.getPossible(val);
-+
-+
-+    if (0 === val.length || 
-+        0 === res.length ||
-+        (!this.alwaysShow && this.maxResults < res.length)) {
-+        this.hideDrop();
-+        this.doUnselected();
-+        this.results = [];
-+        this.dropDown.current = -1;
-+    } else {
-+        this.results = res;
-+        this.populateDropDown(res);
-+        if (1 == res.length) {
-+            this.select(this.dropDown.childNodes[0]);
-+            this.doSelected();
-+        } else {
-+            this.doUnselected();
-+        }
-+    }
-+};
-+
-+//
-+// A lot of the stuff below comes from 
-+// http://www.webreference.com/programming/javascript/ncz/column2
-+//
-+// With thanks to Nicholas C Zakas
-+//
-+TypeAheadControl.prototype.populateDropDown = function(list) {
-+    this.dropDown.innerHTML = '';
-+    var i = 0;
-+    var li;
-+    var img;
-+    var str;
-+
-+    while (i < list.length) {
-+        li = document.createElement('li');
-+        li.id='IdPSelectOption' + i;
-+        str = list[i][0];
-+
-+	if (null !== list[i][2]) {
-+
-+	    img = document.createElement('img');
-+	    img.src = list[i][2];
-+	    img.width = 16;
-+	    img.height = 16;
-+	    img.alt = '';
-+	    li.appendChild(img);
-+	    //
-+	    // trim string back further in this case
-+	    //
-+	    if (str.length > this.maxchars - 2) {
-+		str = str.substring(0, this.maxchars - 2);
-+	    }
-+	    str = ' ' + str;
-+	} else {
-+	    if (str.length > this.maxchars) {
-+		str = str.substring(0, this.maxchars);
-+	    }
-+	}
-+        li.appendChild(document.createTextNode(str));
-+        li.setAttribute('role', 'option');
-+        this.dropDown.appendChild(li);
-+        i++;
-+    }
-+    var off = this.getXY();
-+    this.dropDown.style.left = off[0] + 'px';
-+    this.dropDown.style.top = off[1] + 'px';
-+    this.showDrop();
-+};
-+
-+TypeAheadControl.prototype.getXY = function() {
-+
-+    var node = this.textBox;
-+    var sumX = 0;
-+    var sumY = node.offsetHeight;
-+   
-+    while(node.tagName != 'BODY') {
-+        sumX += node.offsetLeft;
-+        sumY += node.offsetTop;
-+        node = node.offsetParent;
-+    }
-+    //
-+    // And add in the offset for the Body
-+    //
-+    sumX += node.offsetLeft;
-+    sumY += node.offsetTop;
-+
-+    return [sumX, sumY];
-+};
-+
-+TypeAheadControl.prototype.select = function(selected) {
-+    var i = 0;
-+    var node;
-+    this.dropDown.current = -1;
-+    this.doUnselected();
-+    while (i < this.dropDown.childNodes.length) {
-+        node = this.dropDown.childNodes[i];
-+        if (node == selected) {
-+            //
-+            // Highlight it
-+            //
-+            node.className = 'IdPSelectCurrent';
-+            node.setAttribute('aria-selected', 'true');
-+            this.textBox.setAttribute('aria-activedescendant', 'IdPSelectOption' + i);
-+
-+            //
-+            // turn on the button
-+            //
-+            this.doSelected();
-+            //
-+            // setup the cursor
-+            //
-+            this.dropDown.current = i;
-+            //
-+            // and the value for the Server
-+            //
-+            this.origin.value = this.results[i][1];
-+            this.origin.textValue = this.results[i][0];
-+        } else {
-+            node.setAttribute('aria-selected', 'false');
-+            node.className = '';
-+        }
-+        i++;
-+    }
-+    this.textBox.focus();
-+};
-+
-+TypeAheadControl.prototype.downSelect = function() {
-+    if (this.results.length > 0) {
-+
-+        if (-1 == this.dropDown.current) {
-+            //
-+            // mimic a select()
-+            //
-+            this.dropDown.current = 0;
-+            this.dropDown.childNodes[0].className = 'IdPSelectCurrent';
-+            this.dropDown.childNodes[0].setAttribute('aria-selected', 'true');
-+            this.textBox.setAttribute('aria-activedescendant', 'IdPSelectOption' + 0);
-+            this.doSelected();
-+            this.origin.value = this.results[0][1];
-+            this.origin.textValue = this.results[0][0];
-+
-+        } else if (this.dropDown.current < (this.results.length-1)) {
-+            //
-+            // turn off highlight
-+            //
-+            this.dropDown.childNodes[this.dropDown.current].className = '';
-+            //
-+            // move cursor
-+            //
-+            this.dropDown.current++;
-+            //
-+            // and 'select'
-+            //
-+            this.dropDown.childNodes[this.dropDown.current].className = 'IdPSelectCurrent';
-+            this.dropDown.childNodes[this.dropDown.current].setAttribute('aria-selected', 'true');
-+            this.textBox.setAttribute('aria-activedescendant', 'IdPSelectOption' + this.dropDown.current);
-+            this.doSelected();
-+            this.origin.value = this.results[this.dropDown.current][1];
-+            this.origin.textValue = this.results[this.dropDown.current][0];
-+
-+        }
-+    }
-+};
-+
-+
-+TypeAheadControl.prototype.upSelect = function() {
-+    if ((this.results.length > 0) &&
-+        (this.dropDown.current > 0)) {
-+    
-+            //
-+            // turn off highlight
-+            //
-+            this.dropDown.childNodes[this.dropDown.current].className = '';
-+            //
-+            // move cursor
-+            //
-+            this.dropDown.current--;
-+            //
-+            // and 'select'
-+            //
-+            this.dropDown.childNodes[this.dropDown.current].className = 'IdPSelectCurrent';
-+            this.dropDown.childNodes[this.dropDown.current].setAttribute('aria-selected', 'true');
-+            this.textBox.setAttribute('aria-activedescendant', 'IdPSelectOption' + this.dropDown.current);
-+            this.doSelected();
-+            this.origin.value = this.results[this.dropDown.current][1];
-+            this.origin.textValue = this.results[this.dropDown.current][0];
-+        }
-+};
-+ 
-+/** @class IdP Selector UI */
-+function IdPSelectLanguages(){
-+    //
-+    // Globalization stuff
-+    //
-+    this.langBundles = {
-+    'en': {
-+        'fatal.divMissing': '<div> specified  as "insertAtDiv" could not be located in the HTML',
-+        'fatal.noXMLHttpRequest': 'Browser does not support XMLHttpRequest, unable to load IdP selection data',
-+        'fatal.wrongProtocol' : 'Policy supplied to DS was not "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',
-+        'fatal.wrongEntityId' : 'entityId supplied by SP did not match configuration',
-+        'fatal.noData' : 'Metadata download returned no data',
-+        'fatal.loadFailed': 'Failed to download metadata from ',
-+        'fatal.noparms' : 'No parameters to discovery session and no defaultReturn parameter configured',
-+        'fatal.noReturnURL' : "No URL return parameter provided",
-+        'fatal.badProtocol' : "Return request must start with https:// or http://",
-+        'idpPreferred.label': 'Use a suggested selection:',
-+        'idpEntry.label': 'Or enter your organization\'s name',
-+        'idpEntry.NoPreferred.label': 'Enter your organization\'s name',
-+        'idpList.label': 'Or select your organization from the list below',
-+        'idpList.NoPreferred.label': 'Select your organization from the list below',
-+        'idpList.defaultOptionLabel': 'Please select your organization...',
-+        'idpList.showList' : 'Allow me to pick from a list',
-+        'idpList.showSearch' : 'Allow me to specify the site',
-+        'submitButton.label': 'Continue',
-+        'helpText': 'Help',
-+        'defaultLogoAlt' : 'DefaultLogo'
-+    },
-+    'de': {
-+        'fatal.divMissing': 'Das notwendige Div Element fehlt',
-+        'fatal.noXMLHttpRequest': 'Ihr Webbrowser unterst\u00fctzt keine XMLHttpRequests, IdP-Auswahl kann nicht geladen werden',
-+        'fatal.wrongProtocol' : 'DS bekam eine andere Policy als "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',
-+        'fatal.wrongEntityId' : 'Die entityId ist nicht korrekt',
-+        'fatal.loadFailed': 'Metadaten konnten nicht heruntergeladen werden: ',
-+        'fatal.noparms' : 'Parameter f\u00fcr das Discovery Service oder \'defaultReturn\' fehlen',
-+        'fatal.noReturnURL' : "URL return Parmeter fehlt",
-+        'fatal.badProtocol' : "return Request muss mit https:// oder http:// beginnen",
-+        'idpPreferred.label': 'Vorherige Auswahl:',
-+        'idpEntry.label': 'Oder geben Sie den Namen (oder Teile davon) an:',
-+        'idpEntry.NoPreferred.label': 'Namen (oder Teile davon) der Institution angeben:',
-+        'idpList.label': 'Oder w\u00e4hlen Sie Ihre Institution aus einer Liste:',
-+        'idpList.NoPreferred.label': 'Institution aus folgender Liste w\u00e4hlen:',
-+        'idpList.defaultOptionLabel': 'W\u00e4hlen Sie Ihre Institution aus...',
-+        'idpList.showList' : 'Institution aus einer Liste w\u00e4hlen',
-+        'idpList.showSearch' : 'Institution selbst angeben',
-+        'submitButton.label': 'OK',
-+        'helpText': 'Hilfe',
-+        'defaultLogoAlt' : 'Standard logo'
-+        },
-+    'ja': {
-+        'fatal.divMissing': '"insertAtDiv" の ID を持つ <div> が HTML 中に存在しません',
-+        'fatal.noXMLHttpRequest': 'ブラウザが XMLHttpRequest をサポートしていないので IdP 情報を取得できません',
-+        'fatal.wrongProtocol' : 'DSへ渡された Policy パラメータが "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single" ではありません',
-+        'fatal.wrongEntityId' : 'SP から渡された entityId が設定値と異なります',
-+        'fatal.noData' : 'メタデータが空です',
-+        'fatal.loadFailed': '次の URL からメタデータをダウンロードできませんでした: ',
-+        'fatal.noparms' : 'DSにパラメータが渡されておらず defaultReturn も設定されていません',
-+        'fatal.noReturnURL' : "戻り URL が指定されていません",
-+        'fatal.badProtocol' : "戻り URL は https:// か http:// で始まらなければなりません",
-+        'idpPreferred.label': '選択候補の IdP:',
-+        'idpEntry.label': 'もしくはあなたの所属機関名を入力してください',
-+        'idpEntry.NoPreferred.label': 'あなたの所属機関名を入力してください',
-+        'idpList.label': 'もしくはあなたの所属機関を選択してください',
-+        'idpList.NoPreferred.label': 'あなたの所属機関を一覧から選択してください',
-+        'idpList.defaultOptionLabel': '所属機関を選択してください...',
-+        'idpList.showList' : '一覧から選択する',
-+        'idpList.showSearch' : '機関名を入力する',
-+        'submitButton.label': '選択',
-+        'helpText': 'Help',
-+        'defaultLogoAlt' : 'DefaultLogo'
-+    },
-+    'pt-br': {
-+        'fatal.divMissing': 'A tag <div> com "insertAtDiv" não foi encontrada no arquivo HTML',
-+        'fatal.noXMLHttpRequest': 'Seu navegador não suporta "XMLHttpRequest", impossível de carregador os dados do IdP selecionado',
-+        'fatal.wrongProtocol' : 'A política "Policy" fornecida para o DS não foi "urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single"',
-+        'fatal.wrongEntityId' : 'entityId oferecido pelo SP não confere com o da configuração',
-+        'fatal.noData' : 'O arquivo de metadados não retornou nada;',
-+        'fatal.loadFailed': 'Falhou ao realizar download do metadado de ',
-+        'fatal.noparms' : 'Sem parâmetros para sessão de descoberta e sem parâmetro "defaultReturn" configurado',
-+        'fatal.noReturnURL' : "Não foi definida um endereço (URL) de retorno no parâmetro",
-+        'fatal.badProtocol' : "Retorno do endereço requisitado deve começar com https:// ou http://",
-+        'idpPreferred.label': 'Use estas Instituições sugeridas: ',
-+        'idpEntry.label': 'Ou informe o nome da sua Instituição',
-+        'idpEntry.NoPreferred.label': 'Informe o nome da sua Instituição',
-+        'idpList.label': 'Ou selecione sua Instituição através da lista abaixo',
-+        'idpList.NoPreferred.label': 'Selecione sua Instituição através da lista abaixo',
-+        'idpList.defaultOptionLabel': 'Por favor, selecione sua Instituição: ',
-+        'idpList.showList' : 'Permitir que eu escolha um IdP através de uma lista',
-+        'idpList.showSearch' : 'Permitir que eu especifique o IdP',
-+        'submitButton.label': 'Continuar ',
-+        'helpText': 'Ajuda',
-+        'defaultLogoAlt' : 'Logo padrão'
-+        }
-+    };
-+}
-+function IdPSelectUI() {
-+    //
-+    // module locals
-+    //
-+    var idpData;
-+    var base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
-+    var idpSelectDiv;
-+    var lang;
-+    var majorLang;
-+    var defaultLang;
-+    var langBundle;
-+    var defaultLangBundle;
-+    var defaultLogo;
-+    var defaultLogoWidth;
-+    var defaultLogoHeight;
-+    var minWidth;
-+    var minHeight;
-+    var maxWidth;
-+    var maxHeight;
-+    var bestRatio;
-+
-+    //
-+    // Parameters passed into our closure
-+    //
-+    var preferredIdP;
-+    var maxPreferredIdPs;
-+    var helpURL;
-+    var ie6Hack;
-+    var samlIdPCookieTTL;
-+    var maxIdPCharsDropDown;
-+    var maxIdPCharsButton;
-+    var maxIdPCharsAltTxt;
-+    var alwaysShow;
-+    var maxResults;
-+    var ignoreKeywords;
-+    var showListFirst;
-+    var noWriteCookie;
-+    var ignoreURLParams;
-+
-+    //
-+    // The cookie contents
-+    //
-+    var userSelectedIdPs;
-+    //
-+    // Anchors used inside autofunctions
-+    //
-+    var idpEntryDiv;
-+    var idpListDiv;
-+    var idpSelect;
-+    var listButton;
-+    
-+    //
-+    // local configuration
-+    //
-+    var idPrefix = 'idpSelect';
-+    var classPrefix = 'IdPSelect';
-+    var dropDownControl;
-+
-+    //
-+    // DS protocol configuration
-+    //
-+    var returnString = '';
-+    var returnBase='';
-+    var returnParms= [];
-+    var returnIDParam = 'entityID';
-+
-+    // *************************************
-+    // Public functions
-+    // *************************************
-+    
-+    /**
-+       Draws the IdP Selector UI on the screen.  This is the main
-+       method for the IdPSelectUI class.
-+    */
-+    this.draw = function(parms){
-+
-+        if (!setupLocals(parms)) {
-+            return;
-+        }
-+
-+        idpSelectDiv = document.getElementById(parms.insertAtDiv);
-+        if(!idpSelectDiv){
-+            fatal(getLocalizedMessage('fatal.divMissing'));
-+            return;
-+        }
-+
-+        if (!load(parms.dataSource)) {
-+            return;
-+        }
-+        deDupe();
-+        stripHidden(parms.hiddenIdPs);
-+
-+        idpData.sort(function(a,b) {return getLocalizedName(a).localeCompare(getLocalizedName(b));});
-+        
-+        var idpSelector = buildIdPSelector();
-+        idpSelectDiv.appendChild(idpSelector);
-+        dropDownControl.draw(parms.setFocusTextBox);
-+    } ;
-+    
-+    // *************************************
-+    // Private functions
-+    //
-+    // Data Manipulation
-+    //
-+    // *************************************
-+
-+    /**
-+       Copies the "parameters" in the function into namesspace local
-+       variables.  This means most of the work is done outside the
-+       IdPSelectUI object
-+    */
-+
-+    var setupLocals = function (paramsSupplied) {
-+        //
-+        // Copy parameters in
-+        //
-+        var suppliedEntityId;
-+
-+        preferredIdP = paramsSupplied.preferredIdP;
-+        maxPreferredIdPs = paramsSupplied.maxPreferredIdPs;
-+        helpURL = paramsSupplied.helpURL;
-+        ie6Hack = paramsSupplied.ie6Hack;
-+        samlIdPCookieTTL = paramsSupplied.samlIdPCookieTTL;
-+        alwaysShow = paramsSupplied.alwaysShow;
-+        maxResults = paramsSupplied.maxResults;
-+        ignoreKeywords = paramsSupplied.ignoreKeywords;
-+        if (paramsSupplied.showListFirst) {
-+            showListFirst = paramsSupplied.showListFirst;
-+        } else {
-+            showListFirst = false;
-+        }
-+        if (paramsSupplied.noWriteCookie) {
-+            noWriteCookie = paramsSupplied.noWriteCookie;
-+        } else {
-+            noWriteCookie = false;
-+        }
-+        if (paramsSupplied.ignoreURLParams) {
-+            ignoreURLParams = paramsSupplied.ignoreURLParams;
-+        } else {
-+            ignoreURLParams = false;
-+        }
-+
-+        defaultLogo = paramsSupplied.defaultLogo;
-+        defaultLogoWidth = paramsSupplied.defaultLogoWidth;
-+        defaultLogoHeight = paramsSupplied.defaultLogoHeight;
-+        minWidth = paramsSupplied.minWidth;
-+        minHeight = paramsSupplied.minHeight;
-+        maxWidth = paramsSupplied.maxWidth;
-+        maxHeight = paramsSupplied.maxHeight;
-+        bestRatio = paramsSupplied.bestRatio;
-+        maxIdPCharsButton = paramsSupplied.maxIdPCharsButton;
-+        maxIdPCharsDropDown = paramsSupplied.maxIdPCharsDropDown;
-+        maxIdPCharsAltTxt = paramsSupplied.maxIdPCharsAltTxt;
-+
-+        var lang;
-+
-+        if (typeof navigator == 'undefined') {
-+            lang = paramsSupplied.defaultLanguage;
-+        } else {
-+            lang = navigator.language || navigator.userLanguage || paramsSupplied.defaultLanguage;
-+        }
-+        lang = lang.toLowerCase();
-+
-+        if (lang.indexOf('-') > 0) {
-+            majorLang = lang.substring(0, lang.indexOf('-'));
-+        }
-+
-+        var providedLangs = new IdPSelectLanguages();
-+
-+        defaultLang = paramsSupplied.defaultLanguage;
-+
-+        if (typeof paramsSupplied.langBundles != 'undefined' && typeof paramsSupplied.langBundles[lang] != 'undefined') {
-+            langBundle = paramsSupplied.langBundles[lang];
-+        } else if (typeof providedLangs.langBundles[lang] != 'undefined') {
-+            langBundle = providedLangs.langBundles[lang];
-+        } else if (typeof majorLang != 'undefined') {
-+            if (typeof paramsSupplied.langBundles != 'undefined' && typeof paramsSupplied.langBundles[majorLang] != 'undefined') {
-+                langBundle = paramsSupplied.langBundles[majorLang];
-+            } else if (typeof providedLangs.langBundles[majorLang] != 'undefined') {
-+                langBundle = providedLangs.langBundles[majorLang];
-+            }
-+        }
-+        
-+        if (typeof paramsSupplied.langBundles != 'undefined' && typeof paramsSupplied.langBundles[paramsSupplied.defaultLanguage] != 'undefined') {
-+            defaultLangBundle = paramsSupplied.langBundles[paramsSupplied.defaultLanguage];
-+        } else {
-+            defaultLangBundle = providedLangs.langBundles[paramsSupplied.defaultLanguage];
-+        }
-+
-+        //
-+        // Setup Language bundles
-+        //
-+        if (!defaultLangBundle) {
-+            fatal('No languages work');
-+            return false;
-+        }
-+        if (!langBundle) {
-+            debug('No language support for ' + lang);
-+            langBundle = defaultLangBundle;
-+        }
-+
-+        if (paramsSupplied.testGUI) {
-+            //
-+            // no policing of parms
-+            //
-+            return true;
-+        }
-+        //
-+        // Now set up the return values from the URL
-+        //
-+        var policy = 'urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single';
-+        var i;
-+        var isPassive = false;
-+        var parms;
-+        var parmPair;
-+        var win = window;
-+        while (null !== win.parent && win !== win.parent) {
-+            win = win.parent;
-+        }
-+        var loc = win.location;
-+        var parmlist = loc.search;
-+        if (ignoreURLParams || null == parmlist || 0 == parmlist.length || parmlist.charAt(0) != '?') {
-+
-+            if ((null == paramsSupplied.defaultReturn)&& !ignoreURLParams) {
-+
-+                fatal(getLocalizedMessage('fatal.noparms'));
-+                return false;
-+            }
-+            //
-+            // No parameters, so just collect the defaults
-+            //
-+            suppliedEntityId  = paramsSupplied.myEntityID;
-+            returnString = paramsSupplied.defaultReturn;
-+            if (null != paramsSupplied.defaultReturnIDParam) {
-+                returnIDParam = paramsSupplied.defaultReturnIDParam;
-+            }
-+            
-+        } else {
-+            parmlist = parmlist.substring(1);
-+
-+            //
-+            // protect against various hideousness by decoding. We re-encode just before we push
-+            //
-+
-+            parms = parmlist.split('&');
-+            if (parms.length === 0) {
-+
-+                fatal(getLocalizedMessage('fatal.noparms'));
-+                return false;
-+            }
-+
-+            for (i = 0; i < parms.length; i++) {
-+                parmPair = parms[i].split('=');
-+                if (parmPair.length != 2) {
-+                    continue;
-+                }
-+                if (parmPair[0] == 'entityID') {
-+                    suppliedEntityId = decodeURIComponent(parmPair[1]);
-+                } else if (parmPair[0] == 'return') {
-+                    returnString = decodeURIComponent(parmPair[1]);
-+                } else if (parmPair[0] == 'returnIDParam') {
-+                    returnIDParam = decodeURIComponent(parmPair[1]);
-+                } else if (parmPair[0] == 'policy') {
-+                    policy = decodeURIComponent(parmPair[1]);
-+                } else if (parmPair[0] == 'isPassive') {
-+                    isPassive = (parmPair[1].toUpperCase() == "TRUE");
-+                }
-+            }
-+        }
-+        if (policy != 'urn:oasis:names:tc:SAML:profiles:SSO:idpdiscovery-protocol:single') {
-+            fatal(getLocalizedMessage('fatal.wrongProtocol'));
-+            return false;
-+        }
-+        if (paramsSupplied.myEntityID !== null && paramsSupplied.myEntityID != suppliedEntityId) {
-+            fatal(getLocalizedMessage('fatal.wrongEntityId') + '"' + suppliedEntityId + '" != "' + paramsSupplied.myEntityID + '"');
-+            return false;
-+        }
-+        if (null === returnString || returnString.length === 0) {
-+            fatal(getLocalizedMessage('fatal.noReturnURL'));
-+            return false;
-+        }
-+        if (!validProtocol(returnString)) {
-+            fatal(getLocalizedMessage('fatal.badProtocol'));
-+            return false;
-+        }
-+
-+        //
-+        // isPassive
-+        //
-+        if (isPassive) {
-+            var prefs = retrieveUserSelectedIdPs();
-+            if (prefs.length == 0) {
-+                //
-+                // no preference, go back
-+                //
-+                location.href = returnString;
-+                return false;
-+            } else {
-+                var retString = returnIDParam + '=' + encodeURIComponent(prefs[0]);
-+                //
-+                // Compose up the URL
-+                //
-+                if (returnString.indexOf('?') == -1) {
-+                    retString = '?' + retString;
-+                } else {
-+                    retString = '&' + retString;
-+                }
-+                location.href = returnString + retString;
-+                return false;
-+            }            
-+        }
-+
-+        //
-+        // Now split up returnString
-+        //
-+        i = returnString.indexOf('?');
-+        if (i < 0) {
-+            returnBase = returnString;
-+            return true;
-+        }
-+        returnBase = returnString.substring(0, i);
-+        parmlist = returnString.substring(i+1);
-+        parms = parmlist.split('&');
-+        for (i = 0; i < parms.length; i++) {
-+            parmPair = parms[i].split('=');
-+            if (parmPair.length != 2) {
-+                continue;
-+            }
-+            parmPair[1] = decodeURIComponent(parmPair[1]);
-+            returnParms.push(parmPair);
-+        }
-+        return true;
-+    };
-+
-+    /** Deduplicate by entityId */
-+    var deDupe = function() {
-+        var names = [];
-+        var j;
-+        for (j = 0; j < idpData.length; ) {
-+            var eid = getEntityId(idpData[j]);
-+            if (null == names[eid]) {
-+                names[eid] = eid;
-+                j = j + 1;
-+            } else {
-+                idpData.splice(j, 1);
-+            }
-+        }
-+    }
-+
-+    /**
-+       Strips the supllied IdP list from the idpData
-+    */
-+    var stripHidden = function(hiddenList) {
-+    
-+        if (null == hiddenList || 0 == hiddenList.length) {
-+            return;
-+        }
-+        var i;
-+        var j;
-+        for (i = 0; i < hiddenList.length; i++) {
-+            for (j = 0; j < idpData.length; j++) {
-+                if (getEntityId(idpData[j]) == hiddenList[i]) {
-+                    idpData.splice(j, 1);
-+                    break;
-+                }
-+            }
-+        }
-+    }
-+
-+
-+    /**
-+     * Strip the "protocol://host" bit out of the URL and check the protocol
-+     * @param the URL to process
-+     * @return whether it starts with http: or https://
-+     */
-+
-+    var validProtocol = function(s) {
-+        if (null === s) {
-+            return false;
-+        }
-+        var marker = "://";
-+        var protocolEnd = s.indexOf(marker);
-+        if (protocolEnd < 0) {
-+            return false;
-+        }
-+        s = s.substring(0, protocolEnd);
-+        if (s == "http" || s== "https") {
-+            return true;
-+        }
-+        return false;
-+    };
-+
-+    /**
-+     * We need to cache bust on IE.  So how do we know?  Use a bigger hammer.
-+     */
-+    var isIE = function() {
-+        if (null == navigator) {
-+            return false;
-+        }
-+        var browserName = navigator.appName;
-+        if (null == browserName) {
-+            return false;
-+        }
-+        return (browserName == 'Microsoft Internet Explorer') ;
-+    } ;
-+
-+
-+    /**
-+       Loads the data used by the IdP selection UI.  Data is loaded 
-+       from a JSON document fetched from the given url.
-+      
-+       @param {Function} failureCallback A function called if the JSON
-+       document can not be loaded from the source.  This function will
-+       passed the {@link XMLHttpRequest} used to request the JSON data.
-+    */
-+    var load = function(dataSource){
-+        var xhr = null;
-+
-+        try {
-+            xhr = new XMLHttpRequest();
-+        } catch (e) {}
-+        if (null == xhr) {
-+            //
-+            // EDS24. try to get 'Microsoft.XMLHTTP'
-+            //
-+            try {
-+                xhr = new ActiveXObject("Microsoft.XMLHTTP");
-+            } catch (e) {}
-+        }
-+        if (null == xhr) {
-+            //
-+            // EDS35. try to get 'Microsoft.XMLHTTP'
-+            //
-+            try {
-+                xhr = new  ActiveXObject('MSXML2.XMLHTTP.3.0');
-+            } catch (e) {}
-+        }
-+        if (null == xhr) {
-+            fatal(getLocalizedMessage('fatal.noXMLHttpRequest'));
-+            return false;
-+        }
-+
-+        if (isIE()) {
-+            //
-+            // cache bust (for IE)
-+            //
-+            dataSource += '?random=' + (Math.random()*1000000);
-+        }
-+
-+        //
-+        // Grab the data
-+        //
-+        xhr.open('GET', dataSource, false);
-+        if (typeof xhr.overrideMimeType == 'function') {
-+            xhr.overrideMimeType('application/json');
-+        }
-+        xhr.send(null);
-+        
-+        if(xhr.status == 200){
-+            //
-+            // 200 means we got it OK from as web source
-+            // if locally loading its 0.  Go figure
-+            //
-+            var jsonData = xhr.responseText;
-+            if(jsonData === null){
-+                fatal(getLocalizedMessage('fatal.noData'));
-+                return false;
-+            }
-+
-+            //
-+            // Parse it
-+            //
-+
-+            idpData = JSON.parse(jsonData);
-+
-+        }else{
-+            fatal(getLocalizedMessage('fatal.loadFailed') + dataSource);
-+            return false;
-+        }
-+        return true;
-+    };
-+
-+    /**
-+       Returns the idp object with the given name.
-+
-+       @param (String) the name we are interested in
-+       @return (Object) the IdP we care about
-+    */
-+
-+    var getIdPFor = function(idpName) {
-+
-+        for (var i = 0; i < idpData.length; i++) {
-+            if (getEntityId(idpData[i]) == idpName) {
-+                return idpData[i];
-+            }
-+        }
-+        return null;
-+    };
-+
-+    /**
-+       Returns a suitable image from the given IdP
-+       
-+       @param (Object) The IdP
-+       @return Object) a DOM object suitable for insertion
-+       
-+       TODO - rather more careful selection
-+    */
-+
-+    var getImageForIdP = function(idp, useDefault) {
-+
-+        var getBestFit = function(language) {
-+            //
-+            // See GetLocalizedEntry
-+            //
-+            var bestFit = null;
-+            var i;
-+            if (null == idp.Logos) {
-+                return null;
-+            }
-+            for (i in idp.Logos) {
-+                if (idp.Logos[i].lang == language &&
-+                    idp.Logos[i].width != null &&  
-+                    idp.Logos[i].width >= minWidth &&
-+                    idp.Logos[i].height != null && 
-+                    idp.Logos[i].height >= minHeight) {
-+                    if (bestFit === null) {
-+                        bestFit = idp.Logos[i];
-+                    } else {
-+                        me = Math.abs(bestRatio - Math.log(idp.Logos[i].width/idp.Logos[i].height));
-+                        him = Math.abs(bestRatio - Math.log(bestFit.width/bestFit.height));
-+                        if (him > me) {
-+                            bestFit = idp.Logos[i];
-+                        }
-+                    }
-+                }
-+            }
-+            return bestFit;
-+        } ;
-+
-+        var bestFit = null;
-+        var img = document.createElement('img');
-+        setClass(img, 'IdPImg');
-+
-+        bestFit = getBestFit(lang);
-+        if (null === bestFit && typeof majorLang != 'undefined') {
-+            bestFit = getBestFit(majorLang);
-+        }
-+        if (null === bestFit) {
-+            bestFit = getBestFit(null);
-+        }
-+        if (null === bestFit) {
-+            bestFit = getBestFit(defaultLang);
-+        }
-+               
-+        if (null === bestFit) {
-+            if (!useDefault) {
-+                return null;
-+            }
-+            img.src = defaultLogo;
-+            img.width = defaultLogoWidth;
-+            img.height = defaultLogoHeight;
-+            img.alt = getLocalizedMessage('defaultLogoAlt');
-+            return img;
-+        }
-+
-+        img.src = bestFit.value;
-+        var altTxt = getLocalizedName(idp);
-+        if (altTxt.length > maxIdPCharsAltTxt) {
-+            altTxt = altTxt.substring(0, maxIdPCharsAltTxt) + '...';
-+        }
-+        img.alt = altTxt;
-+
-+        var w = bestFit.width;
-+        var h = bestFit.height;
-+        if (w>maxWidth) {
-+            h = (maxWidth/w) * h;
-+            w = maxWidth;
-+        }
-+        if (h> maxHeight) {
-+            w = (maxHeight/h) * w;
-+            w = maxHeight;
-+        }
-+            
-+        img.setAttribute('width', w);
-+        img.setAttribute('height', h);
-+        return img;
-+    };
-+
-+    // *************************************
-+    // Private functions
-+    //
-+    // GUI Manipulation
-+    //
-+    // *************************************
-+    
-+    /**
-+       Builds the IdP selection UI.
-+
-+       Three divs. PreferredIdPTime, EntryTile and DropdownTile
-+      
-+       @return {Element} IdP selector UI
-+    */
-+    var buildIdPSelector = function(){
-+        var containerDiv = buildDiv('IdPSelector');
-+        var preferredTileExists;
-+        preferredTileExists = buildPreferredIdPTile(containerDiv);
-+        buildIdPEntryTile(containerDiv, preferredTileExists);
-+        buildIdPDropDownListTile(containerDiv, preferredTileExists);
-+        return containerDiv;
-+    };
-+
-+    /**
-+      Builds a button for the provided IdP
-+        <div class="preferredIdPButton">
-+          <a href="XYX" onclick=setparm('ABCID')>
-+            <div class=
-+            <img src="https:\\xyc.gif"> <!-- optional -->
-+            XYX Text
-+          </a>
-+        </div>
-+
-+      @param (Object) The IdP
-+      
-+      @return (Element) preselector for the IdP
-+    */
-+
-+    var composePreferredIdPButton = function(idp, uniq, useDefault) {
-+        var div = buildDiv(undefined, 'PreferredIdPButton');
-+        var aval = document.createElement('a');
-+        var retString = returnIDParam + '=' + encodeURIComponent(getEntityId(idp));
-+        var retVal = returnString;
-+        var img = getImageForIdP(idp, useDefault);
-+        //
-+        // Compose up the URL
-+        //
-+        if (retVal.indexOf('?') == -1) {
-+            retString = '?' + retString;
-+        } else {
-+            retString = '&' + retString;
-+        }
-+        aval.href = retVal + retString;
-+        aval.onclick = function () {
-+            selectIdP(getEntityId(idp));
-+        };
-+        if (null != img) {
-+            var imgDiv=buildDiv(undefined, 'PreferredIdPImg');
-+            imgDiv.appendChild(img);
-+            aval.appendChild(imgDiv);
-+        }
-+
-+        var nameDiv = buildDiv(undefined, 'TextDiv');
-+        var nameStr = getLocalizedName(idp);
-+        if (nameStr.length > maxIdPCharsButton) {
-+            nameStr = nameStr.substring(0, maxIdPCharsButton) + '...';
-+        }
-+        div.title = nameStr;
-+        nameDiv.appendChild(document.createTextNode(nameStr));
-+        aval.appendChild(nameDiv);
-+
-+        div.appendChild(aval);
-+        return div;
-+    };
-+
-+    /**
-+     * Builds and populated a text Div
-+     */
-+    var buildTextDiv = function(parent, textId)
-+    {
-+        var div  = buildDiv(undefined, 'TextDiv');
-+        var introTxt = document.createTextNode(getLocalizedMessage(textId)); 
-+        div.appendChild(introTxt);
-+        parent.appendChild(div);
-+    } ;
-+
-+    var setSelector = function (selector, selected) {
-+        if (null === selected || 0 === selected.length || '-' == selected.value) {
-+            return;
-+        }
-+        var i = 0;
-+        while (i < selector.options.length) {
-+            if (selector.options[i].value == selected) {
-+                selector.options[i].selected = true;
-+                break;
-+            }
-+            i++;
-+        }
-+    }
-+
-+    /**
-+       Builds the preferred IdP selection UI (top half of the UI w/ the
-+       IdP buttons)
-+
-+       <div id=prefix+"PreferredIdPTile">
-+          <div> [see comprosePreferredIdPButton </div>
-+          [repeated]
-+       </div>
-+      
-+       @return {Element} preferred IdP selection UI
-+    */
-+    var buildPreferredIdPTile = function(parentDiv) {
-+
-+        var preferredIdPs = getPreferredIdPs();
-+        if (0 === preferredIdPs.length) {
-+            return false;
-+        }
-+
-+        var atLeastOneImg = false;
-+        for(var i = 0 ; i < maxPreferredIdPs && i < preferredIdPs.length; i++){
-+            if (preferredIdPs[i] && getImageForIdP(preferredIdPs[i], false)) {
-+                atLeastOneImg = true;
-+            }
-+        }
-+        
-+        var preferredIdPDIV;
-+        if (atLeastOneImg) {
-+            preferredIdPDIV = buildDiv('PreferredIdPTile');
-+        } else {
-+            preferredIdPDIV = buildDiv('PreferredIdPTileNoImg');
-+        }
-+
-+
-+        buildTextDiv(preferredIdPDIV, 'idpPreferred.label');
-+
-+
-+        for(var i = 0 ; i < maxPreferredIdPs && i < preferredIdPs.length; i++){
-+            if (preferredIdPs[i]) {
-+                var button = composePreferredIdPButton(preferredIdPs[i],i, atLeastOneImg);
-+                preferredIdPDIV.appendChild(button);
-+            }
-+        }
-+
-+        parentDiv.appendChild(preferredIdPDIV);
-+        return true;
-+    };
-+
-+    /**
-+     * Build the <form> from the return parameters
-+     */
-+
-+    var buildSelectForm = function ()
-+    {
-+        var form = document.createElement('form');
-+        idpEntryDiv.appendChild(form);
-+
-+        form.action = returnBase;
-+        form.method = 'GET';
-+        form.setAttribute('autocomplete', 'OFF');
-+        var i = 0;
-+        for (i = 0; i < returnParms.length; i++) {
-+            var hidden = document.createElement('input');
-+            hidden.setAttribute('type', 'hidden');
-+            hidden.name = returnParms[i][0];
-+            hidden.value= returnParms[i][1];
-+            form.appendChild(hidden);
-+        }
-+
-+        return form;
-+    } ;
-+
-+
-+    /**
-+       Build the manual IdP Entry tile (bottom half of UI with
-+       search-as-you-type field).
-+
-+       <div id = prefix+"IdPEntryTile">
-+         <form>
-+           <input type="text", id=prefix+"IdPSelectInput/> // select text box
-+           <input type="hidden" /> param to send
-+           <input type="submit" />
-+           
-+      
-+       @return {Element} IdP entry UI tile
-+    */
-+    var buildIdPEntryTile = function(parentDiv, preferredTile) {
-+
-+
-+        idpEntryDiv = buildDiv('IdPEntryTile');
-+        if (showListFirst) {
-+            idpEntryDiv.style.display = 'none';
-+        }
-+        
-+        var label = document.createElement('label');
-+        label.setAttribute('for', idPrefix + 'Input');
-+
-+        if (preferredTile) {
-+            buildTextDiv(label, 'idpEntry.label');
-+        } else {
-+            buildTextDiv(label, 'idpEntry.NoPreferred.label');
-+        }
-+
-+        var form = buildSelectForm();
-+        form.appendChild(label);
-+      
-+        var textInput = document.createElement('input');
-+        form.appendChild(textInput);
-+
-+        textInput.type='text';
-+        setID(textInput, 'Input');
-+
-+        var hidden = document.createElement('input');
-+        hidden.setAttribute('type', 'hidden');
-+        form.appendChild(hidden);
-+
-+        hidden.name = returnIDParam;
-+        hidden.value='-';
-+
-+        var button = buildContinueButton('Select');
-+        button.disabled = true;
-+        form.appendChild(button);
-+        
-+        form.onsubmit = function () {
-+            //
-+            // Make sure we cannot ask for garbage
-+            //
-+            if (null === hidden.value || 0 === hidden.value.length || '-' == hidden.value) {
-+                return false;
-+            }
-+            //
-+            // And always ask for the cookie to be updated before we continue
-+            //
-+            textInput.value = hidden.textValue;
-+            selectIdP(hidden.value);
-+            return true;
-+        };
-+
-+        dropDownControl = new TypeAheadControl(idpData, textInput, hidden, button, maxIdPCharsDropDown, getLocalizedName, getEntityId, geticon, ie6Hack, alwaysShow, maxResults, getKeywords);
-+
-+        var a = document.createElement('a');
-+        a.appendChild(document.createTextNode(getLocalizedMessage('idpList.showList')));
-+        a.href = '#';
-+        setClass(a, 'DropDownToggle');
-+        a.onclick = function() { 
-+            idpEntryDiv.style.display='none';
-+            setSelector(idpSelect, hidden.value);
-+            idpListDiv.style.display='inline';
-+            listButton.focus();
-+            return false;
-+        };
-+        idpEntryDiv.appendChild(a);
-+        buildHelpText(idpEntryDiv);
-+                                              
-+        parentDiv.appendChild(idpEntryDiv);
-+    };
-+    
-+    /**
-+       Builds the drop down list containing all the IdPs from which a
-+       user may choose.
-+
-+       <div id=prefix+"IdPListTile">
-+          <label for="idplist">idpList.label</label>
-+          <form action="URL from IDP Data" method="GET">
-+          <select name="param from IdP data">
-+             <option value="EntityID">Localized Entity Name</option>
-+             [...]
-+          </select>
-+          <input type="submit"/>
-+       </div>
-+        
-+       @return {Element} IdP drop down selection UI tile
-+    */
-+    var buildIdPDropDownListTile = function(parentDiv, preferredTile) {
-+        idpListDiv = buildDiv('IdPListTile');
-+        if (!showListFirst) {
-+            idpListDiv.style.display = 'none';
-+        }
-+
-+        var label = document.createElement('label');
-+        label.setAttribute('for', idPrefix + 'Selector');
-+
-+        if (preferredTile) {
-+            buildTextDiv(label, 'idpList.label');
-+        } else {
-+            buildTextDiv(label, 'idpList.NoPreferred.label');
-+        }
-+
-+        idpSelect = document.createElement('select');
-+        setID(idpSelect, 'Selector');
-+        idpSelect.name = returnIDParam;
-+        idpListDiv.appendChild(idpSelect);
-+        
-+        var idpOption = buildSelectOption('-', getLocalizedMessage('idpList.defaultOptionLabel'));
-+        idpOption.selected = true;
-+
-+        idpSelect.appendChild(idpOption);
-+    
-+        var idp;
-+        for(var i=0; i<idpData.length; i++){
-+            idp = idpData[i];
-+            idpOption = buildSelectOption(getEntityId(idp), getLocalizedName(idp));
-+            idpSelect.appendChild(idpOption);
-+        }
-+
-+        var form = buildSelectForm();
-+        form.appendChild(label);
-+        form.appendChild(idpSelect);
-+
-+        form.onsubmit = function () {
-+            //
-+            // The first entery isn't selectable
-+            //
-+            if (idpSelect.selectedIndex < 1) {
-+                return false;
-+            }
-+            //
-+            // otherwise update the cookie
-+            //
-+            selectIdP(idpSelect.options[idpSelect.selectedIndex].value);
-+            return true;
-+        };
-+
-+        var button = buildContinueButton('List');
-+        listButton = button;
-+        form.appendChild(button);
-+
-+        idpListDiv.appendChild(form);
-+
-+        //
-+        // The switcher
-+        //
-+        var a = document.createElement('a');
-+        a.appendChild(document.createTextNode(getLocalizedMessage('idpList.showSearch')));
-+        a.href = '#';
-+        setClass(a, 'DropDownToggle');
-+        a.onclick = function() { 
-+            idpEntryDiv.style.display='inline';
-+            idpListDiv.style.display='none';
-+            return false;
-+        };
-+        idpListDiv.appendChild(a);
-+        buildHelpText(idpListDiv);
-+
-+        parentDiv.appendChild(idpListDiv);
-+    };
-+
-+    /**
-+       Builds the 'continue' button used to submit the IdP selection.
-+      
-+       @return {Element} HTML button used to submit the IdP selection
-+    */
-+    var buildContinueButton = function(which) {
-+        var button  = document.createElement('input');
-+        button.setAttribute('type', 'submit');
-+        button.value = getLocalizedMessage('submitButton.label');
-+        setID(button, which + 'Button');
-+
-+        return button;
-+    };
-+
-+    /**
-+       Builds an aref to point to the helpURL
-+    */
-+
-+    var buildHelpText = function(containerDiv) {
-+        var aval = document.createElement('a');
-+        aval.href = helpURL;
-+        aval.appendChild(document.createTextNode(getLocalizedMessage('helpText')));
-+        setClass(aval, 'HelpButton');
-+        containerDiv.appendChild(aval);
-+    } ;
-+    
-+    /**
-+       Creates a div element whose id attribute is set to the given ID.
-+      
-+       @param {String} id ID for the created div element
-+       @param {String} [class] class of the created div element
-+       @return {Element} DOM 'div' element with an 'id' attribute
-+    */
-+    var buildDiv = function(id, whichClass){
-+        var div = document.createElement('div');
-+        if (undefined !== id) {
-+            setID(div, id);
-+        }
-+        if(undefined !== whichClass) {
-+
-+            setClass(div, whichClass);
-+        }
-+        return div;
-+    };
-+    
-+    /**
-+       Builds an HTML select option element
-+      
-+       @param {String} value value of the option when selected
-+       @param {String} label displayed label of the option
-+    */
-+    var buildSelectOption = function(value, text){
-+        var option = document.createElement('option');
-+        option.value = value;
-+        if (text.length > maxIdPCharsDropDown) {
-+            text = text.substring(0, maxIdPCharsDropDown);
-+        }
-+        option.appendChild(document.createTextNode(text));
-+        return option;
-+    };
-+    
-+    /**
-+       Sets the attribute 'id' on the provided object
-+       We do it through this function so we have a single
-+       point where we can prepend a value
-+       
-+       @param (Object) The [DOM] Object we want to set the attribute on
-+       @param (String) The Id we want to set
-+    */
-+
-+    var setID = function(obj, name) {
-+        obj.id = idPrefix + name;
-+    };
-+
-+    var setClass = function(obj, name) {
-+        obj.setAttribute('class', classPrefix + name);
-+    };
-+
-+    /**
-+       Returns the DOM object with the specified id.  We abstract
-+       through a function to allow us to prepend to the name
-+       
-+       @param (String) the (unprepended) id we want
-+    */
-+    var locateElement = function(name) {
-+        return document.getElementById(idPrefix + name);
-+    };
-+
-+    // *************************************
-+    // Private functions
-+    //
-+    // GUI actions.  Note that there is an element of closure going on
-+    // here since these names are invisible outside this module.
-+    // 
-+    //
-+    // *************************************
-+
-+    /**
-+     * Base helper function for when an IdP is selected
-+     * @param (String) The UN-encoded entityID of the IdP
-+    */
-+
-+    var selectIdP = function(idP) {
-+        updateSelectedIdPs(idP);
-+        saveUserSelectedIdPs(userSelectedIdPs);
-+    };
-+
-+    // *************************************
-+    // Private functions
-+    //
-+    // Localization handling
-+    //
-+    // *************************************
-+
-+    /**
-+       Gets a localized string from the given language pack.  This
-+       method uses the {@link langBundles} given during construction
-+       time.
-+
-+       @param {String} messageId ID of the message to retrieve
-+
-+       @return (String) the message
-+    */
-+    var getLocalizedMessage = function(messageId){
-+
-+        var message = langBundle[messageId];
-+        if(!message){
-+            message = defaultLangBundle[messageId];
-+        }
-+        if(!message){
-+            message = 'Missing message for ' + messageId;
-+        }
-+        
-+        return message;
-+    };
-+
-+    var getEntityId = function(idp) {
-+        return idp.entityID;
-+    };
-+
-+    /**
-+       Returns the icon information for the provided idp
-+
-+       @param (Object) an idp.  This should have an array 'names' with sub
-+        elements 'lang' and 'name'.
-+
-+       @return (String) The localized name
-+    */
-+    var geticon = function(idp) {
-+        var i;
-+
-+        if (null == idp.Logos) { 
-+            return null;
-+        }
-+        for (i =0; i < idp.Logos.length; i++) {
-+	    var logo = idp.Logos[i];
-+
-+	    if (logo.height == "16" && logo.width == "16") {
-+		if (null == logo.lang ||
-+		    lang == logo.lang ||
-+		    (typeof majorLang != 'undefined' && majorLang == logo.lang) ||
-+		    defaultLang == logo.lang) {
-+		    return logo.value;
-+		}
-+	    }
-+	}
-+
-+	return null;
-+    } ;
-+
-+    /**
-+       Returns the localized name information for the provided idp
-+
-+       @param (Object) an idp.  This should have an array 'names' with sub
-+        elements 'lang' and 'name'.
-+
-+       @return (String) The localized name
-+    */
-+    var getLocalizedName = function(idp) {
-+        var res = getLocalizedEntry(idp.DisplayNames);
-+        if (null !== res) {
-+            return res;
-+        }
-+        debug('No Name entry in any language for ' + getEntityId(idp));
-+        return getEntityId(idp);
-+    } ;
-+
-+    var getKeywords = function(idp) {
-+        if (ignoreKeywords || null == idp.Keywords) {
-+            return null;
-+        }
-+        var s = getLocalizedEntry(idp.Keywords);
-+
-+        return s;
-+    }
-+        
-+    var getLocalizedEntry = function(theArray){
-+        var i;
-+
-+        //
-+        // try by full name
-+        //
-+        for (i in theArray) {
-+            if (theArray[i].lang == lang) {
-+                return theArray[i].value;
-+            }
-+        }
-+        //
-+        // then by major language
-+        //
-+        if (typeof majorLang != 'undefined') {
-+            for (i in theArray) {
-+                if (theArray[i].lang == majorLang) {
-+                    return theArray[i].value;
-+                }
-+            }
-+        }
-+        //
-+        // then by null language in metadata
-+        //
-+        for (i in theArray) {
-+            if (theArray[i].lang == null) {
-+                return theArray[i].value;
-+            }
-+        }
-+        
-+        //
-+        // then by default language
-+        //
-+        for (i in theArray) {
-+            if (theArray[i].lang == defaultLang) {
-+                return theArray[i].value;
-+            }
-+        }
-+
-+        return null;
-+    };
-+
-+    
-+    // *************************************
-+    // Private functions
-+    //
-+    // Cookie and preferred IdP Handling
-+    //
-+    // *************************************
-+
-+    /**
-+       Gets the preferred IdPs.  The first elements in the array will
-+       be the preselected preferred IdPs.  The following elements will
-+       be those past IdPs selected by a user.  The size of the array
-+       will be no larger than the maximum number of preferred IdPs.
-+    */
-+    var getPreferredIdPs = function() {
-+        var idps = [];
-+        var offset = 0;
-+        var i;
-+        var j;
-+
-+        //
-+        // populate start of array with preselected IdPs
-+        //
-+        if(null != preferredIdP){
-+            for(i=0; i < preferredIdP.length && i < maxPreferredIdPs-1; i++){
-+                idps[i] = getIdPFor(preferredIdP[i]);
-+                offset++;
-+            }
-+        }
-+        
-+        //
-+        // And then the cookie based ones
-+        //
-+        userSelectedIdPs = retrieveUserSelectedIdPs();
-+        for (i = offset, j=0; i < userSelectedIdPs.length && i < maxPreferredIdPs; i++, j++){
-+            idps.push(getIdPFor(userSelectedIdPs[j]));
-+        }
-+        return idps;
-+    };
-+
-+    /**
-+       Update the userSelectedIdPs list with the new value.
-+
-+       @param (String) the newly selected IdP
-+    */
-+    var updateSelectedIdPs = function(newIdP) {
-+
-+        //
-+        // We cannot use split since it does not appear to
-+        // work as per spec on ie8.
-+        //
-+        var newList = [];
-+
-+        //
-+        // iterate through the list copying everything but the old
-+        // name
-+        //
-+        while (0 !== userSelectedIdPs.length) {
-+            var what = userSelectedIdPs.pop();
-+            if (what != newIdP) {
-+                newList.unshift(what);
-+            }
-+        }
-+
-+        //
-+        // And shove it in at the top
-+        //
-+        newList.unshift(newIdP);
-+        userSelectedIdPs = newList;
-+        return;
-+    };
-+    
-+    /**
-+       Gets the IdP previously selected by the user.
-+      
-+       @return {Array} user selected IdPs identified by their entity ID
-+    */
-+    var retrieveUserSelectedIdPs = function(){
-+        var userSelectedIdPs = [];
-+        var i, j;
-+        var cookies;
-+
-+        cookies = document.cookie.split( ';' );
-+        for (i = 0; i < cookies.length; i++) {
-+            //
-+            // Do not use split('='), '=' is valid in Base64 encoding!
-+            //
-+            var cookie = cookies[i];
-+            var splitPoint = cookie.indexOf( '=' );
-+            var cookieName = cookie.substring(0, splitPoint);
-+            var cookieValues = cookie.substring(splitPoint+1);
-+                                
-+            if ( '_saml_idp' == cookieName.replace(/^\s+|\s+$/g, '') ) {
-+                cookieValues = cookieValues.replace(/^\s+|\s+$/g, '');
-+                cookieValues = cookieValues.replace('+','%20');
-+                cookieValues = cookieValues.split('%20');
-+                for(j=cookieValues.length; j > 0; j--){
-+                    if (0 === cookieValues[j-1].length) {
-+                        continue;
-+                    }
-+                    var dec = base64Decode(decodeURIComponent(cookieValues[j-1]));
-+                    if (dec.length > 0) {
-+                        userSelectedIdPs.push(dec);
-+                    }
-+                }
-+            }
-+        }
-+
-+        return userSelectedIdPs;
-+    };
-+    
-+    /**
-+       Saves the IdPs selected by the user.
-+      
-+       @param {Array} idps idps selected by the user
-+    */
-+    var saveUserSelectedIdPs = function(idps){
-+        var cookieData = [];
-+        var length = idps.length;
-+
-+        if (noWriteCookie) {
-+            return;
-+        }
-+
-+        if (length > 5) {
-+            length = 5;
-+        }
-+        for(var i=length; i > 0; i--){
-+            if (idps[i-1].length > 0) {
-+                cookieData.push(encodeURIComponent(base64Encode(idps[i-1])));
-+            }
-+        }
-+        
-+        var expireDate = null;
-+        if(samlIdPCookieTTL){
-+            var now = new Date();
-+            cookieTTL = samlIdPCookieTTL * 24 * 60 * 60 * 1000;
-+            expireDate = new Date(now.getTime() + cookieTTL);
-+        }
-+        
-+        document.cookie='_saml_idp' + '=' + cookieData.join('%20') + '; path = /' +
-+            ((expireDate===null) ? '' : '; expires=' + expireDate.toUTCString());
-+        
-+    };
-+    
-+    /**
-+       Base64 encodes the given string.
-+      
-+       @param {String} input string to be encoded
-+      
-+       @return {String} base64 encoded string
-+    */
-+    var base64Encode = function(input) {
-+        var output = '', c1, c2, c3, e1, e2, e3, e4;
-+
-+        for ( var i = 0; i < input.length; ) {
-+            c1 = input.charCodeAt(i++);
-+            c2 = input.charCodeAt(i++);
-+            c3 = input.charCodeAt(i++);
-+            e1 = c1 >> 2;
-+            e2 = ((c1 & 3) << 4) + (c2 >> 4);
-+            e3 = ((c2 & 15) << 2) + (c3 >> 6);
-+            e4 = c3 & 63;
-+            if (isNaN(c2)){
-+                e3 = e4 = 64;
-+            } else if (isNaN(c3)){
-+                e4 = 64;
-+            }
-+            output += base64chars.charAt(e1) +
-+                base64chars.charAt(e2) +
-+                base64chars.charAt(e3) + 
-+                base64chars.charAt(e4);
-+        }
-+
-+        return output;
-+    };
-+    
-+    /**
-+       Base64 decodes the given string.
-+      
-+       @param {String} input string to be decoded
-+      
-+       @return {String} base64 decoded string
-+    */
-+    var base64Decode = function(input) {
-+        var output = '', chr1, chr2, chr3, enc1, enc2, enc3, enc4;
-+        var i = 0;
-+
-+        // Remove all characters that are not A-Z, a-z, 0-9, +, /, or =
-+        var base64test = /[^A-Za-z0-9\+\/\=]/g;
-+        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
-+
-+        do {
-+            enc1 = base64chars.indexOf(input.charAt(i++));
-+            enc2 = base64chars.indexOf(input.charAt(i++));
-+            enc3 = base64chars.indexOf(input.charAt(i++));
-+            enc4 = base64chars.indexOf(input.charAt(i++));
-+
-+            chr1 = (enc1 << 2) | (enc2 >> 4);
-+            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
-+            chr3 = ((enc3 & 3) << 6) | enc4;
-+
-+            output = output + String.fromCharCode(chr1);
-+
-+            if (enc3 != 64) {
-+                output = output + String.fromCharCode(chr2);
-+            }
-+            if (enc4 != 64) {
-+                output = output + String.fromCharCode(chr3);
-+            }
-+
-+            chr1 = chr2 = chr3 = '';
-+            enc1 = enc2 = enc3 = enc4 = '';
-+
-+        } while (i < input.length);
-+
-+        return output;
-+    };
-+
-+    // *************************************
-+    // Private functions
-+    //
-+    // Error Handling.  we'll keep it separate with a view to eventual
-+    //                  exbedding into log4js
-+    //
-+    // *************************************
-+    /**
-+       
-+    */
-+
-+    var fatal = function(message) {
-+        alert('FATAL - DISCO UI:' + message);
-+        var txt = document.createTextNode(message); 
-+        idpSelectDiv.appendChild(txt);
-+    };
-+
-+    var debug = function() {
-+        //
-+        // Nothing
-+    };
-+}
-+
-+(new IdPSelectUI()).draw(new IdPSelectUIParms());
-diff --git a/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js b/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
-index 440f661..4500063 100644
---- a/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
-+++ b/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
-@@ -75,4 +75,13 @@ function IdPSelectUIParms(){
-     this.maxWidth = 115;
-     this.maxHeight = 69;
-     this.bestRatio = Math.log(80 / 60);
-+
-+    // Customise using the settings from the DOM
-+    var idpSelect = document.getElementById('idpSelect');
-+    var options = JSON.parse(idpSelect.getAttribute('data-options'));
-+    for (var key in options) {
-+        if (options.hasOwnProperty(key)) {
-+            this[key] = options[key];
-+        }
-+    }
- }
diff --git a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
index 91809fd..eed1533 100644
--- a/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
+++ b/src/collective/shibboleth/browser/shibboleth-ds/idpselect.css
@@ -1,11 +1,8 @@
 /* Top level is idpSelectIdPSelector */
 #idpSelectIdPSelector
 {
-    width: 389px;
+    width: 100%;
     text-align: left;
-    background-color: #FFFFFF;
-    border: 2px #A40000 solid;
-    padding: 10px;
 }
 
 /* Next down are the idpSelectPreferredIdPTile, idpSelectIdPEntryTile & idpSelectIdPListTile */
@@ -16,7 +13,7 @@
  */
 #idpSelectPreferredIdPTile
 {
-    height:138px; /* Force the height so that the  selector box
+    min-height:138px; /* Force the height so that the  selector box
                    * goes below when there is only one preslect 
                    */
 }
@@ -123,6 +120,7 @@ div.IdPSelectPreferredIdPButton div.IdPSelectTextDiv
 #idpSelectIdPSelector a:link 
 {
     text-decoration: none;
+    border-bottom: 0 none;
 }
 
 #idpSelectIdPSelector a:visited 
@@ -203,3 +201,7 @@ div.IdPSelectDropDown div {
     color: white;
 }
 /* END */
+
+#idpSelectIdPEntryTile {
+    margin-top:15px;
+}
diff --git a/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js b/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
index 440f661..4500063 100644
--- a/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
+++ b/src/collective/shibboleth/browser/shibboleth-ds/idpselect_config.js
@@ -75,4 +75,13 @@ function IdPSelectUIParms(){
     this.maxWidth = 115;
     this.maxHeight = 69;
     this.bestRatio = Math.log(80 / 60);
+
+    // Customise using the settings from the DOM
+    var idpSelect = document.getElementById('idpSelect');
+    var options = JSON.parse(idpSelect.getAttribute('data-options'));
+    for (var key in options) {
+        if (options.hasOwnProperty(key)) {
+            this[key] = options[key];
+        }
+    }
 }
